import jwt from 'jsonwebtoken';
import { v4 } from 'uuid';
import crypto from 'crypto';

const OwnCapability = {
    BLOCK_USERS: 'block-users',
    CHANGE_MAX_DURATION: 'change-max-duration',
    CREATE_CALL: 'create-call',
    CREATE_REACTION: 'create-reaction',
    ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',
    END_CALL: 'end-call',
    JOIN_BACKSTAGE: 'join-backstage',
    JOIN_CALL: 'join-call',
    JOIN_ENDED_CALL: 'join-ended-call',
    MUTE_USERS: 'mute-users',
    PIN_FOR_EVERYONE: 'pin-for-everyone',
    READ_CALL: 'read-call',
    REMOVE_CALL_MEMBER: 'remove-call-member',
    SCREENSHARE: 'screenshare',
    SEND_AUDIO: 'send-audio',
    SEND_VIDEO: 'send-video',
    START_BROADCAST_CALL: 'start-broadcast-call',
    START_RECORD_CALL: 'start-record-call',
    START_TRANSCRIPTION_CALL: 'start-transcription-call',
    STOP_BROADCAST_CALL: 'stop-broadcast-call',
    STOP_RECORD_CALL: 'stop-record-call',
    STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',
    UPDATE_CALL: 'update-call',
    UPDATE_CALL_MEMBER: 'update-call-member',
    UPDATE_CALL_PERMISSIONS: 'update-call-permissions',
    UPDATE_CALL_SETTINGS: 'update-call-settings',
};

function JWTUserToken(apiSecret, payload) {
    // make sure we return a clear error when jwt is shimmed (ie. browser build)
    if (jwt == null || jwt.sign == null) {
        throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);
    }
    const opts = Object.assign({
        algorithm: 'HS256',
        noTimestamp: true,
    });
    if (payload.iat) {
        opts.noTimestamp = false;
    }
    return jwt.sign(payload, apiSecret, opts);
}
function JWTServerToken(apiSecret, jwtOptions = {}) {
    const payload = {
        server: true,
    };
    const opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);
    return jwt.sign(payload, apiSecret, opts);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class StreamError extends Error {
    constructor(message, metadata, code, errorOptions) {
        super(message, errorOptions);
        this.metadata = metadata;
        this.code = code;
    }
}

const getRateLimitFromResponseHeader = (responseHeaders) => {
    const rateLimit = responseHeaders.has('x-ratelimit-limit')
        ? +responseHeaders.get('x-ratelimit-limit')
        : undefined;
    const rateLimitRemaining = responseHeaders.has('x-ratelimit-remaining')
        ? +responseHeaders.get('x-ratelimit-remaining')
        : undefined;
    const rateLimitReset = responseHeaders.has('x-ratelimit-reset')
        ? new Date(+responseHeaders.get('x-ratelimit-reset') * 1000)
        : undefined;
    const result = {
        rateLimit,
        rateLimitRemaining,
        rateLimitReset,
    };
    return result;
};

class BaseApi {
    constructor(apiConfig) {
        this.apiConfig = apiConfig;
        this.sendRequest = (method, url, pathParams, queryParams, body) => __awaiter(this, void 0, void 0, function* () {
            queryParams = queryParams !== null && queryParams !== void 0 ? queryParams : {};
            queryParams.api_key = this.apiConfig.apiKey;
            const encodedParams = this.queryParamsStringify(queryParams);
            if (pathParams) {
                Object.keys(pathParams).forEach((paramName) => {
                    url = url.replace(`{${paramName}}`, pathParams[paramName]);
                });
            }
            url += `?${encodedParams}`;
            const clientRequestId = v4();
            const headers = {
                Authorization: this.apiConfig.token,
                'stream-auth-type': 'jwt',
                'Content-Type': 'application/json',
                'X-Stream-Client': 'stream-node-' + "0.4.3",
                'Accept-Encoding': 'gzip',
                'x-client-request-id': clientRequestId,
            };
            const signal = AbortSignal.timeout(this.apiConfig.timeout);
            try {
                const response = yield fetch(`${this.apiConfig.baseUrl}${url}`, {
                    signal,
                    method,
                    body: JSON.stringify(body),
                    headers,
                });
                const responseHeaders = response.headers;
                const metadata = {
                    clientRequestId,
                    responseHeaders,
                    responseCode: response.status,
                    rateLimit: getRateLimitFromResponseHeader(responseHeaders),
                };
                if (response.status < 200 || response.status >= 300) {
                    let error;
                    try {
                        error = (yield response.json());
                    }
                    catch (_) {
                        throw new StreamError(`Stream error: ${response.status} - ${response.statusText}`, metadata, response.status);
                    }
                    throw new StreamError(`Stream error code ${error.code}: ${error.message}`, metadata, error.code, undefined);
                }
                const responseBody = (yield response.json());
                return { body: responseBody, metadata };
            }
            catch (error) {
                if (error instanceof StreamError) {
                    throw error;
                }
                const metadata = {
                    clientRequestId,
                    responseCode: error.status,
                };
                if (error.name === 'AbortError' || error.name === 'TimeoutError') {
                    throw new StreamError(`The request was aborted due to to the ${this.apiConfig.timeout}ms timeout, you can set the timeout in the StreamClient constructor`, metadata, undefined, error);
                }
                else {
                    throw new StreamError(`The request failed due to an unexpected error`, metadata, error);
                }
            }
        });
        this.queryParamsStringify = (params) => {
            const newParams = [];
            for (const k in params) {
                const param = params[k];
                if (Array.isArray(param)) {
                    newParams.push(`${k}=${encodeURIComponent(param.join(','))}`);
                }
                else if (param instanceof Date) {
                    newParams.push(param.toISOString());
                }
                else if (typeof param === 'object') {
                    newParams.push(`${k}=${encodeURIComponent(JSON.stringify(param))}`);
                }
                else {
                    if (typeof param === 'string' ||
                        typeof param === 'number' ||
                        typeof param === 'boolean') {
                        newParams.push(`${k}=${encodeURIComponent(param)}`);
                    }
                }
            }
            return newParams.join('&');
        };
    }
}

const decoders = {};
const decodeDatetimeType = (input) => new Date(Math.floor(input / 1000000));
decoders.DatetimeType = decodeDatetimeType;
const decode = (typeMappings, input) => {
    if (!input || Object.keys(typeMappings).length === 0)
        return input;
    Object.keys(typeMappings).forEach((key) => {
        if (input[key] != null) {
            if (typeMappings[key]) {
                const decoder = decoders[typeMappings[key].type];
                if (decoder) {
                    if (typeMappings[key].isSingle) {
                        input[key] = decoder(input[key]);
                    }
                    else {
                        Object.keys(input[key]).forEach((k) => {
                            input[key][k] = decoder(input[key][k]);
                        });
                    }
                }
            }
        }
    });
    return input;
};
decoders.ActionLog = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        review_queue_item: { type: 'ReviewQueueItem', isSingle: true },
        target_user: { type: 'UserObject', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ActionLogResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        review_queue_item: { type: 'ReviewQueueItem', isSingle: true },
        target_user: { type: 'UserResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.AppResponseFields = (input) => {
    const typeMappings = {
        call_types: { type: 'CallType', isSingle: false },
        channel_configs: { type: 'ChannelConfig', isSingle: false },
        push_notifications: { type: 'PushNotificationFields', isSingle: true },
        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.AutomodDetails = (input) => {
    const typeMappings = {
        result: { type: 'MessageModerationResult', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Ban = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        expires: { type: 'DatetimeType', isSingle: true },
        channel: { type: 'Channel', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        target: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.BanResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        expires: { type: 'DatetimeType', isSingle: true },
        banned_by: { type: 'UserResponse', isSingle: true },
        channel: { type: 'ChannelResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.BlockListResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.BlockUsersResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.BlockedUserResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        blocked_user: { type: 'UserResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallParticipantResponse = (input) => {
    const typeMappings = {
        joined_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallRecording = (input) => {
    const typeMappings = {
        end_time: { type: 'DatetimeType', isSingle: true },
        start_time: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        created_by: { type: 'UserResponse', isSingle: true },
        ended_at: { type: 'DatetimeType', isSingle: true },
        starts_at: { type: 'DatetimeType', isSingle: true },
        session: { type: 'CallSessionResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallSessionResponse = (input) => {
    const typeMappings = {
        participants: { type: 'CallParticipantResponse', isSingle: false },
        accepted_by: { type: 'DatetimeType', isSingle: false },
        missed_by: { type: 'DatetimeType', isSingle: false },
        rejected_by: { type: 'DatetimeType', isSingle: false },
        ended_at: { type: 'DatetimeType', isSingle: true },
        live_ended_at: { type: 'DatetimeType', isSingle: true },
        live_started_at: { type: 'DatetimeType', isSingle: true },
        started_at: { type: 'DatetimeType', isSingle: true },
        timer_ends_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallStateResponseFields = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallStatsReportSummaryResponse = (input) => {
    const typeMappings = {
        first_stats_time: { type: 'DatetimeType', isSingle: true },
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallTranscription = (input) => {
    const typeMappings = {
        end_time: { type: 'DatetimeType', isSingle: true },
        start_time: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallType = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CallTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Channel = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_message_at: { type: 'DatetimeType', isSingle: true },
        invites: { type: 'ChannelMember', isSingle: false },
        members: { type: 'ChannelMember', isSingle: false },
        config: { type: 'ChannelConfig', isSingle: true },
        config_overrides: { type: 'ChannelConfig', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        truncated_by: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelConfig = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelConfigWithInfo = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        commands: { type: 'Command', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ChannelMember = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        ban_expires: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        invite_accepted_at: { type: 'DatetimeType', isSingle: true },
        invite_rejected_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelMemberResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        ban_expires: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        invite_accepted_at: { type: 'DatetimeType', isSingle: true },
        invite_rejected_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelMute = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        expires: { type: 'DatetimeType', isSingle: true },
        channel: { type: 'ChannelResponse', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        hide_messages_before: { type: 'DatetimeType', isSingle: true },
        last_message_at: { type: 'DatetimeType', isSingle: true },
        mute_expires_at: { type: 'DatetimeType', isSingle: true },
        truncated_at: { type: 'DatetimeType', isSingle: true },
        members: { type: 'ChannelMember', isSingle: false },
        config: { type: 'ChannelConfigWithInfo', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        truncated_by: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelStateResponse = (input) => {
    const typeMappings = {
        members: { type: 'ChannelMember', isSingle: false },
        messages: { type: 'MessageResponse', isSingle: false },
        pinned_messages: { type: 'MessageResponse', isSingle: false },
        threads: { type: 'ThreadState', isSingle: false },
        hide_messages_before: { type: 'DatetimeType', isSingle: true },
        pending_messages: { type: 'PendingMessageResponse', isSingle: false },
        read: { type: 'ReadStateResponse', isSingle: false },
        watchers: { type: 'UserResponse', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        membership: { type: 'ChannelMember', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelStateResponseFields = (input) => {
    const typeMappings = {
        members: { type: 'ChannelMember', isSingle: false },
        messages: { type: 'MessageResponse', isSingle: false },
        pinned_messages: { type: 'MessageResponse', isSingle: false },
        threads: { type: 'ThreadState', isSingle: false },
        hide_messages_before: { type: 'DatetimeType', isSingle: true },
        pending_messages: { type: 'PendingMessageResponse', isSingle: false },
        read: { type: 'ReadStateResponse', isSingle: false },
        watchers: { type: 'UserResponse', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        membership: { type: 'ChannelMember', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ChannelTypeConfig = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        commands: { type: 'Command', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.CheckResponse = (input) => {
    const typeMappings = {
        item: { type: 'ReviewQueueItem', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Command = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ConfigResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        velocity_filter_config: { type: 'VelocityFilterConfig', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateCallTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateChannelTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateCommandResponse = (input) => {
    const typeMappings = {
        command: { type: 'Command', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateGuestResponse = (input) => {
    const typeMappings = {
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateImportResponse = (input) => {
    const typeMappings = {
        import_task: { type: 'ImportTask', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CreateRoleResponse = (input) => {
    const typeMappings = {
        role: { type: 'Role', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.CustomCheckResponse = (input) => {
    const typeMappings = {
        scored_at: { type: 'DatetimeType', isSingle: true },
        reviewed_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.DeactivateUserResponse = (input) => {
    const typeMappings = {
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.DeleteCallResponse = (input) => {
    const typeMappings = {
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.DeleteChannelResponse = (input) => {
    const typeMappings = {
        channel: { type: 'ChannelResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.DeleteMessageResponse = (input) => {
    const typeMappings = {
        message: { type: 'MessageResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Device = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.EgressRTMPResponse = (input) => {
    const typeMappings = {
        started_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.EventResponse = (input) => {
    const typeMappings = {
        event: { type: 'WSEvent', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ExportUserResponse = (input) => {
    const typeMappings = {
        messages: { type: 'Message', isSingle: false },
        reactions: { type: 'Reaction', isSingle: false },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Flag2 = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.FlagDetails = (input) => {
    const typeMappings = {
        automod: { type: 'AutomodDetails', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.FlagFeedback = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.FullUserResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        channel_mutes: { type: 'ChannelMute', isSingle: false },
        devices: { type: 'Device', isSingle: false },
        mutes: { type: 'UserMuteResponse', isSingle: false },
        deactivated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_active: { type: 'DatetimeType', isSingle: true },
        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },
        push_notifications: {
            type: 'PushNotificationSettingsResponse',
            isSingle: true,
        },
    };
    return decode(typeMappings, input);
};
decoders.GetApplicationResponse = (input) => {
    const typeMappings = {
        app: { type: 'AppResponseFields', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetBlockListResponse = (input) => {
    const typeMappings = {
        blocklist: { type: 'BlockListResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetBlockedUsersResponse = (input) => {
    const typeMappings = {
        blocks: { type: 'BlockedUserResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.GetCallResponse = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetCallTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetChannelTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        commands: { type: 'Command', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.GetCommandResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetConfigResponse = (input) => {
    const typeMappings = {
        config: { type: 'ConfigResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetExportChannelsStatusResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetImportResponse = (input) => {
    const typeMappings = {
        import_task: { type: 'ImportTask', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetManyMessagesResponse = (input) => {
    const typeMappings = {
        messages: { type: 'Message', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.GetMessageResponse = (input) => {
    const typeMappings = {
        message: { type: 'MessageWithChannelResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetOrCreateCallResponse = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetReactionsResponse = (input) => {
    const typeMappings = {
        reactions: { type: 'Reaction', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.GetRepliesResponse = (input) => {
    const typeMappings = {
        messages: { type: 'MessageResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.GetReviewQueueItemResponse = (input) => {
    const typeMappings = {
        history: { type: 'ReviewQueueItem', isSingle: false },
        item: { type: 'ReviewQueueItem', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetTaskResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetThreadResponse = (input) => {
    const typeMappings = {
        thread: { type: 'ThreadStateResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GetUserModerationReportResponse = (input) => {
    const typeMappings = {
        user_blocks: { type: 'UserBlock', isSingle: false },
        user_mutes: { type: 'UserMute', isSingle: false },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.GoLiveResponse = (input) => {
    const typeMappings = {
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ImportTask = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        history: { type: 'ImportTaskHistory', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ImportTaskHistory = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ListBlockListResponse = (input) => {
    const typeMappings = {
        blocklists: { type: 'BlockListResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListCallTypeResponse = (input) => {
    const typeMappings = {
        call_types: { type: 'CallTypeResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListChannelTypesResponse = (input) => {
    const typeMappings = {
        channel_types: { type: 'ChannelTypeConfig', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListCommandsResponse = (input) => {
    const typeMappings = {
        commands: { type: 'Command', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListDevicesResponse = (input) => {
    const typeMappings = {
        devices: { type: 'Device', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListImportsResponse = (input) => {
    const typeMappings = {
        import_tasks: { type: 'ImportTask', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListPushProvidersResponse = (input) => {
    const typeMappings = {
        push_providers: { type: 'PushProviderResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListRecordingsResponse = (input) => {
    const typeMappings = {
        recordings: { type: 'CallRecording', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListRolesResponse = (input) => {
    const typeMappings = {
        roles: { type: 'Role', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ListTranscriptionsResponse = (input) => {
    const typeMappings = {
        transcriptions: { type: 'CallTranscription', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.MarkReadResponse = (input) => {
    const typeMappings = {
        event: { type: 'MessageReadEvent', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MemberResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MembersResponse = (input) => {
    const typeMappings = {
        members: { type: 'ChannelMember', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.Message = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_reactions: { type: 'Reaction', isSingle: false },
        mentioned_users: { type: 'UserObject', isSingle: false },
        own_reactions: { type: 'Reaction', isSingle: false },
        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        message_text_updated_at: { type: 'DatetimeType', isSingle: true },
        pin_expires: { type: 'DatetimeType', isSingle: true },
        pinned_at: { type: 'DatetimeType', isSingle: true },
        thread_participants: { type: 'UserObject', isSingle: false },
        pinned_by: { type: 'UserObject', isSingle: true },
        poll: { type: 'Poll', isSingle: true },
        quoted_message: { type: 'Message', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MessageFlagResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        approved_at: { type: 'DatetimeType', isSingle: true },
        rejected_at: { type: 'DatetimeType', isSingle: true },
        reviewed_at: { type: 'DatetimeType', isSingle: true },
        details: { type: 'FlagDetails', isSingle: true },
        message: { type: 'Message', isSingle: true },
        moderation_feedback: { type: 'FlagFeedback', isSingle: true },
        moderation_result: { type: 'MessageModerationResult', isSingle: true },
        reviewed_by: { type: 'UserResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MessageHistoryEntryResponse = (input) => {
    const typeMappings = {
        message_updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MessageModerationResult = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MessageReadEvent = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        thread: { type: 'ThreadResponse', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MessageResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_reactions: { type: 'ReactionResponse', isSingle: false },
        mentioned_users: { type: 'UserResponse', isSingle: false },
        own_reactions: { type: 'ReactionResponse', isSingle: false },
        user: { type: 'UserResponse', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        message_text_updated_at: { type: 'DatetimeType', isSingle: true },
        pin_expires: { type: 'DatetimeType', isSingle: true },
        pinned_at: { type: 'DatetimeType', isSingle: true },
        thread_participants: { type: 'UserResponse', isSingle: false },
        pinned_by: { type: 'UserResponse', isSingle: true },
        poll: { type: 'Poll', isSingle: true },
        quoted_message: { type: 'Message', isSingle: true },
        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.MessageWithChannelResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_reactions: { type: 'ReactionResponse', isSingle: false },
        mentioned_users: { type: 'UserResponse', isSingle: false },
        own_reactions: { type: 'ReactionResponse', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        message_text_updated_at: { type: 'DatetimeType', isSingle: true },
        pin_expires: { type: 'DatetimeType', isSingle: true },
        pinned_at: { type: 'DatetimeType', isSingle: true },
        thread_participants: { type: 'UserResponse', isSingle: false },
        pinned_by: { type: 'UserResponse', isSingle: true },
        poll: { type: 'Poll', isSingle: true },
        quoted_message: { type: 'Message', isSingle: true },
        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.ModerationUsageStats = (input) => {
    const typeMappings = {
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MuteChannelResponse = (input) => {
    const typeMappings = {
        channel_mutes: { type: 'ChannelMute', isSingle: false },
        channel_mute: { type: 'ChannelMute', isSingle: true },
        own_user: { type: 'OwnUser', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.MuteResponse = (input) => {
    const typeMappings = {
        mutes: { type: 'UserMute', isSingle: false },
        own_user: { type: 'OwnUser', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.NullTime = (input) => {
    const typeMappings = {
        value: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.OwnUser = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        channel_mutes: { type: 'ChannelMute', isSingle: false },
        devices: { type: 'Device', isSingle: false },
        mutes: { type: 'UserMute', isSingle: false },
        deactivated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_active: { type: 'DatetimeType', isSingle: true },
        push_notifications: { type: 'PushNotificationSettings', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PendingMessageResponse = (input) => {
    const typeMappings = {
        channel: { type: 'ChannelResponse', isSingle: true },
        message: { type: 'MessageResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Poll = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_answers: { type: 'PollVote', isSingle: false },
        own_votes: { type: 'PollVote', isSingle: false },
        created_by: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollResponse = (input) => {
    const typeMappings = {
        poll: { type: 'PollResponseData', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollResponseData = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        own_votes: { type: 'PollVoteResponseData', isSingle: false },
        created_by: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollVote = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollVoteResponse = (input) => {
    const typeMappings = {
        vote: { type: 'PollVoteResponseData', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollVoteResponseData = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PollVotesResponse = (input) => {
    const typeMappings = {
        votes: { type: 'PollVoteResponseData', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.PushNotificationFields = (input) => {
    const typeMappings = {
        providers: { type: 'PushProvider', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.PushNotificationSettings = (input) => {
    const typeMappings = {
        disabled_until: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PushNotificationSettingsResponse = (input) => {
    const typeMappings = {
        disabled_until: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PushProvider = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        disabled_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.PushProviderResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        disabled_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.QueryBannedUsersResponse = (input) => {
    const typeMappings = {
        bans: { type: 'BanResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryCallMembersResponse = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryCallStatsResponse = (input) => {
    const typeMappings = {
        reports: { type: 'CallStatsReportSummaryResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryCallsResponse = (input) => {
    const typeMappings = {
        calls: { type: 'CallStateResponseFields', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryChannelsResponse = (input) => {
    const typeMappings = {
        channels: { type: 'ChannelStateResponseFields', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryFeedModerationTemplate = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.QueryFeedModerationTemplatesResponse = (input) => {
    const typeMappings = {
        templates: { type: 'QueryFeedModerationTemplate', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryMessageFlagsResponse = (input) => {
    const typeMappings = {
        flags: { type: 'MessageFlagResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryMessageHistoryResponse = (input) => {
    const typeMappings = {
        message_history: { type: 'MessageHistoryEntryResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryModerationLogsResponse = (input) => {
    const typeMappings = {
        l_og_s: { type: 'ActionLogResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryPollsResponse = (input) => {
    const typeMappings = {
        polls: { type: 'PollResponseData', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryReactionsResponse = (input) => {
    const typeMappings = {
        reactions: { type: 'ReactionResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryReviewQueueResponse = (input) => {
    const typeMappings = {
        items: { type: 'ReviewQueueItem', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryThreadsResponse = (input) => {
    const typeMappings = {
        threads: { type: 'ThreadStateResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryUsageStatsResponse = (input) => {
    const typeMappings = {
        items: { type: 'ModerationUsageStats', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.QueryUsersResponse = (input) => {
    const typeMappings = {
        users: { type: 'FullUserResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.Reaction = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReactionGroupResponse = (input) => {
    const typeMappings = {
        first_reaction_at: { type: 'DatetimeType', isSingle: true },
        last_reaction_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReactionRemovalResponse = (input) => {
    const typeMappings = {
        message: { type: 'Message', isSingle: true },
        reaction: { type: 'Reaction', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReactionResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReactivateUserResponse = (input) => {
    const typeMappings = {
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Read = (input) => {
    const typeMappings = {
        last_read: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReadStateResponse = (input) => {
    const typeMappings = {
        last_read: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ReviewQueueItem = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        actions: { type: 'ActionLog', isSingle: false },
        bans: { type: 'Ban', isSingle: false },
        flags: { type: 'Flag2', isSingle: false },
        completed_at: { type: 'NullTime', isSingle: true },
        reviewed_at: { type: 'NullTime', isSingle: true },
        assigned_to: { type: 'UserObject', isSingle: true },
        entity_creator: { type: 'UserObject', isSingle: true },
        feeds_v2_reaction: { type: 'Reaction', isSingle: true },
        message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.Role = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.SearchResult = (input) => {
    const typeMappings = {
        message: { type: 'SearchResultMessage', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.SearchResultMessage = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_reactions: { type: 'Reaction', isSingle: false },
        mentioned_users: { type: 'UserObject', isSingle: false },
        own_reactions: { type: 'Reaction', isSingle: false },
        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        message_text_updated_at: { type: 'DatetimeType', isSingle: true },
        pin_expires: { type: 'DatetimeType', isSingle: true },
        pinned_at: { type: 'DatetimeType', isSingle: true },
        thread_participants: { type: 'UserObject', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        pinned_by: { type: 'UserObject', isSingle: true },
        poll: { type: 'Poll', isSingle: true },
        quoted_message: { type: 'Message', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.SendMessageResponse = (input) => {
    const typeMappings = {
        message: { type: 'MessageResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.SendReactionResponse = (input) => {
    const typeMappings = {
        message: { type: 'MessageResponse', isSingle: true },
        reaction: { type: 'ReactionResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.StopLiveResponse = (input) => {
    const typeMappings = {
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.SubmitActionResponse = (input) => {
    const typeMappings = {
        item: { type: 'ReviewQueueItem', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ThreadParticipant = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        last_read_at: { type: 'DatetimeType', isSingle: true },
        last_thread_message_at: { type: 'DatetimeType', isSingle: true },
        left_thread_at: { type: 'DatetimeType', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ThreadResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_message_at: { type: 'DatetimeType', isSingle: true },
        thread_participants: { type: 'ThreadParticipant', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        parent_message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ThreadState = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_replies: { type: 'Message', isSingle: false },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_message_at: { type: 'DatetimeType', isSingle: true },
        read: { type: 'Read', isSingle: false },
        thread_participants: { type: 'ThreadParticipant', isSingle: false },
        channel: { type: 'Channel', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        parent_message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.ThreadStateResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        latest_replies: { type: 'MessageResponse', isSingle: false },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_message_at: { type: 'DatetimeType', isSingle: true },
        read: { type: 'Read', isSingle: false },
        thread_participants: { type: 'ThreadParticipant', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        created_by: { type: 'UserResponse', isSingle: true },
        parent_message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.TruncateChannelResponse = (input) => {
    const typeMappings = {
        channel: { type: 'ChannelResponse', isSingle: true },
        message: { type: 'MessageResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UnreadCountsBatchResponse = (input) => {
    const typeMappings = {
        counts_by_user: { type: 'UnreadCountsResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.UnreadCountsChannel = (input) => {
    const typeMappings = {
        last_read: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UnreadCountsResponse = (input) => {
    const typeMappings = {
        channels: { type: 'UnreadCountsChannel', isSingle: false },
        threads: { type: 'UnreadCountsThread', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.UnreadCountsThread = (input) => {
    const typeMappings = {
        last_read: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateCallMembersResponse = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.UpdateCallResponse = (input) => {
    const typeMappings = {
        members: { type: 'MemberResponse', isSingle: false },
        call: { type: 'CallResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateCallTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateChannelPartialResponse = (input) => {
    const typeMappings = {
        members: { type: 'ChannelMemberResponse', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateChannelResponse = (input) => {
    const typeMappings = {
        members: { type: 'ChannelMember', isSingle: false },
        channel: { type: 'ChannelResponse', isSingle: true },
        message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateChannelTypeResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateCommandResponse = (input) => {
    const typeMappings = {
        command: { type: 'Command', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateMemberPartialResponse = (input) => {
    const typeMappings = {
        channel_member: { type: 'ChannelMemberResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateMessagePartialResponse = (input) => {
    const typeMappings = {
        message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateMessageResponse = (input) => {
    const typeMappings = {
        message: { type: 'Message', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateThreadPartialResponse = (input) => {
    const typeMappings = {
        thread: { type: 'ThreadResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpdateUsersResponse = (input) => {
    const typeMappings = {
        users: { type: 'FullUserResponse', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.UpsertConfigResponse = (input) => {
    const typeMappings = {
        config: { type: 'ConfigResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpsertModerationTemplateResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UpsertPushProviderResponse = (input) => {
    const typeMappings = {
        push_provider: { type: 'PushProviderResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UserBlock = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UserMute = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        expires: { type: 'DatetimeType', isSingle: true },
        target: { type: 'UserObject', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UserMuteResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        expires: { type: 'DatetimeType', isSingle: true },
        target: { type: 'UserResponse', isSingle: true },
        user: { type: 'UserResponse', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UserObject = (input) => {
    const typeMappings = {
        ban_expires: { type: 'DatetimeType', isSingle: true },
        created_at: { type: 'DatetimeType', isSingle: true },
        deactivated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_active: { type: 'DatetimeType', isSingle: true },
        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        push_notifications: { type: 'PushNotificationSettings', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.UserResponse = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        updated_at: { type: 'DatetimeType', isSingle: true },
        devices: { type: 'Device', isSingle: false },
        ban_expires: { type: 'DatetimeType', isSingle: true },
        deactivated_at: { type: 'DatetimeType', isSingle: true },
        deleted_at: { type: 'DatetimeType', isSingle: true },
        last_active: { type: 'DatetimeType', isSingle: true },
        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },
        push_notifications: {
            type: 'PushNotificationSettingsResponse',
            isSingle: true,
        },
    };
    return decode(typeMappings, input);
};
decoders.VelocityFilterConfig = (input) => {
    const typeMappings = {
        rule: { type: 'VelocityFilterConfigRule', isSingle: false },
    };
    return decode(typeMappings, input);
};
decoders.VelocityFilterConfigRule = (input) => {
    const typeMappings = {
        timeout: { type: 'DatetimeType', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.WSEvent = (input) => {
    const typeMappings = {
        created_at: { type: 'DatetimeType', isSingle: true },
        channel: { type: 'ChannelResponse', isSingle: true },
        created_by: { type: 'UserObject', isSingle: true },
        me: { type: 'OwnUser', isSingle: true },
        member: { type: 'ChannelMember', isSingle: true },
        message: { type: 'Message', isSingle: true },
        poll: { type: 'Poll', isSingle: true },
        poll_vote: { type: 'PollVote', isSingle: true },
        reaction: { type: 'Reaction', isSingle: true },
        thread: { type: 'ThreadResponse', isSingle: true },
        user: { type: 'UserObject', isSingle: true },
    };
    return decode(typeMappings, input);
};
decoders.WrappedUnreadCountsResponse = (input) => {
    const typeMappings = {
        channels: { type: 'UnreadCountsChannel', isSingle: false },
        threads: { type: 'UnreadCountsThread', isSingle: false },
    };
    return decode(typeMappings, input);
};

class CommonApi extends BaseApi {
    constructor() {
        super(...arguments);
        this.getApp = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const response = yield this.sendRequest('GET', '/api/v2/app', undefined, undefined);
            (_a = decoders.GetApplicationResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateApp = (request) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            const body = {
                async_url_enrich_enabled: request === null || request === void 0 ? void 0 : request.async_url_enrich_enabled,
                auto_translation_enabled: request === null || request === void 0 ? void 0 : request.auto_translation_enabled,
                before_message_send_hook_url: request === null || request === void 0 ? void 0 : request.before_message_send_hook_url,
                cdn_expiration_seconds: request === null || request === void 0 ? void 0 : request.cdn_expiration_seconds,
                channel_hide_members_only: request === null || request === void 0 ? void 0 : request.channel_hide_members_only,
                custom_action_handler_url: request === null || request === void 0 ? void 0 : request.custom_action_handler_url,
                disable_auth_checks: request === null || request === void 0 ? void 0 : request.disable_auth_checks,
                disable_permissions_checks: request === null || request === void 0 ? void 0 : request.disable_permissions_checks,
                enforce_unique_usernames: request === null || request === void 0 ? void 0 : request.enforce_unique_usernames,
                feeds_moderation_enabled: request === null || request === void 0 ? void 0 : request.feeds_moderation_enabled,
                feeds_v2_region: request === null || request === void 0 ? void 0 : request.feeds_v2_region,
                image_moderation_enabled: request === null || request === void 0 ? void 0 : request.image_moderation_enabled,
                migrate_permissions_to_v2: request === null || request === void 0 ? void 0 : request.migrate_permissions_to_v2,
                moderation_enabled: request === null || request === void 0 ? void 0 : request.moderation_enabled,
                moderation_webhook_url: request === null || request === void 0 ? void 0 : request.moderation_webhook_url,
                multi_tenant_enabled: request === null || request === void 0 ? void 0 : request.multi_tenant_enabled,
                permission_version: request === null || request === void 0 ? void 0 : request.permission_version,
                reminders_interval: request === null || request === void 0 ? void 0 : request.reminders_interval,
                reminders_max_members: request === null || request === void 0 ? void 0 : request.reminders_max_members,
                revoke_tokens_issued_before: request === null || request === void 0 ? void 0 : request.revoke_tokens_issued_before,
                sns_key: request === null || request === void 0 ? void 0 : request.sns_key,
                sns_secret: request === null || request === void 0 ? void 0 : request.sns_secret,
                sns_topic_arn: request === null || request === void 0 ? void 0 : request.sns_topic_arn,
                sqs_key: request === null || request === void 0 ? void 0 : request.sqs_key,
                sqs_secret: request === null || request === void 0 ? void 0 : request.sqs_secret,
                sqs_url: request === null || request === void 0 ? void 0 : request.sqs_url,
                video_provider: request === null || request === void 0 ? void 0 : request.video_provider,
                webhook_url: request === null || request === void 0 ? void 0 : request.webhook_url,
                allowed_flag_reasons: request === null || request === void 0 ? void 0 : request.allowed_flag_reasons,
                image_moderation_block_labels: request === null || request === void 0 ? void 0 : request.image_moderation_block_labels,
                image_moderation_labels: request === null || request === void 0 ? void 0 : request.image_moderation_labels,
                user_search_disallowed_roles: request === null || request === void 0 ? void 0 : request.user_search_disallowed_roles,
                webhook_events: request === null || request === void 0 ? void 0 : request.webhook_events,
                agora_options: request === null || request === void 0 ? void 0 : request.agora_options,
                apn_config: request === null || request === void 0 ? void 0 : request.apn_config,
                async_moderation_config: request === null || request === void 0 ? void 0 : request.async_moderation_config,
                datadog_info: request === null || request === void 0 ? void 0 : request.datadog_info,
                file_upload_config: request === null || request === void 0 ? void 0 : request.file_upload_config,
                firebase_config: request === null || request === void 0 ? void 0 : request.firebase_config,
                grants: request === null || request === void 0 ? void 0 : request.grants,
                hms_options: request === null || request === void 0 ? void 0 : request.hms_options,
                huawei_config: request === null || request === void 0 ? void 0 : request.huawei_config,
                image_upload_config: request === null || request === void 0 ? void 0 : request.image_upload_config,
                push_config: request === null || request === void 0 ? void 0 : request.push_config,
                xiaomi_config: request === null || request === void 0 ? void 0 : request.xiaomi_config,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/app', undefined, undefined, body);
            (_b = decoders.Response) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listBlockLists = () => __awaiter(this, void 0, void 0, function* () {
            var _c;
            const response = yield this.sendRequest('GET', '/api/v2/blocklists', undefined, undefined);
            (_c = decoders.ListBlockListResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createBlockList = (request) => __awaiter(this, void 0, void 0, function* () {
            var _d;
            const body = {
                name: request === null || request === void 0 ? void 0 : request.name,
                words: request === null || request === void 0 ? void 0 : request.words,
                type: request === null || request === void 0 ? void 0 : request.type,
            };
            const response = yield this.sendRequest('POST', '/api/v2/blocklists', undefined, undefined, body);
            (_d = decoders.Response) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteBlockList = (request) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/blocklists/{name}', pathParams, undefined);
            (_e = decoders.Response) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getBlockList = (request) => __awaiter(this, void 0, void 0, function* () {
            var _f;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('GET', '/api/v2/blocklists/{name}', pathParams, undefined);
            (_f = decoders.GetBlockListResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateBlockList = (request) => __awaiter(this, void 0, void 0, function* () {
            var _g;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {
                words: request === null || request === void 0 ? void 0 : request.words,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/blocklists/{name}', pathParams, undefined, body);
            (_g = decoders.Response) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.checkPush = (request) => __awaiter(this, void 0, void 0, function* () {
            var _h;
            const body = {
                apn_template: request === null || request === void 0 ? void 0 : request.apn_template,
                firebase_data_template: request === null || request === void 0 ? void 0 : request.firebase_data_template,
                firebase_template: request === null || request === void 0 ? void 0 : request.firebase_template,
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
                push_provider_name: request === null || request === void 0 ? void 0 : request.push_provider_name,
                push_provider_type: request === null || request === void 0 ? void 0 : request.push_provider_type,
                skip_devices: request === null || request === void 0 ? void 0 : request.skip_devices,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/check_push', undefined, undefined, body);
            (_h = decoders.CheckPushResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.checkSNS = (request) => __awaiter(this, void 0, void 0, function* () {
            var _j;
            const body = {
                sns_key: request === null || request === void 0 ? void 0 : request.sns_key,
                sns_secret: request === null || request === void 0 ? void 0 : request.sns_secret,
                sns_topic_arn: request === null || request === void 0 ? void 0 : request.sns_topic_arn,
            };
            const response = yield this.sendRequest('POST', '/api/v2/check_sns', undefined, undefined, body);
            (_j = decoders.CheckSNSResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.checkSQS = (request) => __awaiter(this, void 0, void 0, function* () {
            var _k;
            const body = {
                sqs_key: request === null || request === void 0 ? void 0 : request.sqs_key,
                sqs_secret: request === null || request === void 0 ? void 0 : request.sqs_secret,
                sqs_url: request === null || request === void 0 ? void 0 : request.sqs_url,
            };
            const response = yield this.sendRequest('POST', '/api/v2/check_sqs', undefined, undefined, body);
            (_k = decoders.CheckSQSResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteDevice = (request) => __awaiter(this, void 0, void 0, function* () {
            var _l;
            const queryParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/devices', undefined, queryParams);
            (_l = decoders.Response) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listDevices = (request) => __awaiter(this, void 0, void 0, function* () {
            var _m;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/devices', undefined, queryParams);
            (_m = decoders.ListDevicesResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createDevice = (request) => __awaiter(this, void 0, void 0, function* () {
            var _o;
            const body = {
                id: request === null || request === void 0 ? void 0 : request.id,
                push_provider: request === null || request === void 0 ? void 0 : request.push_provider,
                push_provider_name: request === null || request === void 0 ? void 0 : request.push_provider_name,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                voip_token: request === null || request === void 0 ? void 0 : request.voip_token,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/devices', undefined, undefined, body);
            (_o = decoders.Response) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.exportUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _p;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
            };
            const response = yield this.sendRequest('POST', '/api/v2/export/users', undefined, undefined, body);
            (_p = decoders.ExportUsersResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listExternalStorage = () => __awaiter(this, void 0, void 0, function* () {
            var _q;
            const response = yield this.sendRequest('GET', '/api/v2/external_storage', undefined, undefined);
            (_q = decoders.ListExternalStorageResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _r;
            const body = {
                bucket: request === null || request === void 0 ? void 0 : request.bucket,
                name: request === null || request === void 0 ? void 0 : request.name,
                storage_type: request === null || request === void 0 ? void 0 : request.storage_type,
                gcs_credentials: request === null || request === void 0 ? void 0 : request.gcs_credentials,
                path: request === null || request === void 0 ? void 0 : request.path,
                aws_s3: request === null || request === void 0 ? void 0 : request.aws_s3,
                azure_blob: request === null || request === void 0 ? void 0 : request.azure_blob,
            };
            const response = yield this.sendRequest('POST', '/api/v2/external_storage', undefined, undefined, body);
            (_r = decoders.CreateExternalStorageResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _s;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/external_storage/{name}', pathParams, undefined);
            (_s = decoders.DeleteExternalStorageResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _t;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {
                bucket: request === null || request === void 0 ? void 0 : request.bucket,
                storage_type: request === null || request === void 0 ? void 0 : request.storage_type,
                gcs_credentials: request === null || request === void 0 ? void 0 : request.gcs_credentials,
                path: request === null || request === void 0 ? void 0 : request.path,
                aws_s3: request === null || request === void 0 ? void 0 : request.aws_s3,
                azure_blob: request === null || request === void 0 ? void 0 : request.azure_blob,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/external_storage/{name}', pathParams, undefined, body);
            (_t = decoders.UpdateExternalStorageResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.checkExternalStorage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _u;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('GET', '/api/v2/external_storage/{name}/check', pathParams, undefined);
            (_u = decoders.CheckExternalStorageResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createGuest = (request) => __awaiter(this, void 0, void 0, function* () {
            var _v;
            const body = {
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/guest', undefined, undefined, body);
            (_v = decoders.CreateGuestResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createImportURL = (request) => __awaiter(this, void 0, void 0, function* () {
            var _w;
            const body = {
                filename: request === null || request === void 0 ? void 0 : request.filename,
            };
            const response = yield this.sendRequest('POST', '/api/v2/import_urls', undefined, undefined, body);
            (_w = decoders.CreateImportURLResponse) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listImports = () => __awaiter(this, void 0, void 0, function* () {
            var _x;
            const response = yield this.sendRequest('GET', '/api/v2/imports', undefined, undefined);
            (_x = decoders.ListImportsResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createImport = (request) => __awaiter(this, void 0, void 0, function* () {
            var _y;
            const body = {
                mode: request === null || request === void 0 ? void 0 : request.mode,
                path: request === null || request === void 0 ? void 0 : request.path,
            };
            const response = yield this.sendRequest('POST', '/api/v2/imports', undefined, undefined, body);
            (_y = decoders.CreateImportResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getImport = (request) => __awaiter(this, void 0, void 0, function* () {
            var _z;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/imports/{id}', pathParams, undefined);
            (_z = decoders.GetImportResponse) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getOG = (request) => __awaiter(this, void 0, void 0, function* () {
            var _0;
            const queryParams = {
                url: request === null || request === void 0 ? void 0 : request.url,
            };
            const response = yield this.sendRequest('GET', '/api/v2/og', undefined, queryParams);
            (_0 = decoders.GetOGResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listPermissions = () => __awaiter(this, void 0, void 0, function* () {
            var _1;
            const response = yield this.sendRequest('GET', '/api/v2/permissions', undefined, undefined);
            (_1 = decoders.ListPermissionsResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getPermission = (request) => __awaiter(this, void 0, void 0, function* () {
            var _2;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/permissions/{id}', pathParams, undefined);
            (_2 = decoders.GetCustomPermissionResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listPushProviders = () => __awaiter(this, void 0, void 0, function* () {
            var _3;
            const response = yield this.sendRequest('GET', '/api/v2/push_providers', undefined, undefined);
            (_3 = decoders.ListPushProvidersResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.upsertPushProvider = (request) => __awaiter(this, void 0, void 0, function* () {
            var _4;
            const body = {
                push_provider: request === null || request === void 0 ? void 0 : request.push_provider,
            };
            const response = yield this.sendRequest('POST', '/api/v2/push_providers', undefined, undefined, body);
            (_4 = decoders.UpsertPushProviderResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deletePushProvider = (request) => __awaiter(this, void 0, void 0, function* () {
            var _5;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/push_providers/{type}/{name}', pathParams, undefined);
            (_5 = decoders.Response) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getRateLimits = (request) => __awaiter(this, void 0, void 0, function* () {
            var _6;
            const queryParams = {
                server_side: request === null || request === void 0 ? void 0 : request.server_side,
                android: request === null || request === void 0 ? void 0 : request.android,
                ios: request === null || request === void 0 ? void 0 : request.ios,
                web: request === null || request === void 0 ? void 0 : request.web,
                endpoints: request === null || request === void 0 ? void 0 : request.endpoints,
            };
            const response = yield this.sendRequest('GET', '/api/v2/rate_limits', undefined, queryParams);
            (_6 = decoders.GetRateLimitsResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listRoles = () => __awaiter(this, void 0, void 0, function* () {
            var _7;
            const response = yield this.sendRequest('GET', '/api/v2/roles', undefined, undefined);
            (_7 = decoders.ListRolesResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createRole = (request) => __awaiter(this, void 0, void 0, function* () {
            var _8;
            const body = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('POST', '/api/v2/roles', undefined, undefined, body);
            (_8 = decoders.CreateRoleResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteRole = (request) => __awaiter(this, void 0, void 0, function* () {
            var _9;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/roles/{name}', pathParams, undefined);
            (_9 = decoders.Response) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getTask = (request) => __awaiter(this, void 0, void 0, function* () {
            var _10;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/tasks/{id}', pathParams, undefined);
            (_10 = decoders.GetTaskResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _11;
            const queryParams = {
                payload: request === null || request === void 0 ? void 0 : request.payload,
            };
            const response = yield this.sendRequest('GET', '/api/v2/users', undefined, queryParams);
            (_11 = decoders.QueryUsersResponse) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateUsersPartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _12;
            const body = {
                users: request === null || request === void 0 ? void 0 : request.users,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/users', undefined, undefined, body);
            (_12 = decoders.UpdateUsersResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _13;
            const body = {
                users: request === null || request === void 0 ? void 0 : request.users,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users', undefined, undefined, body);
            (_13 = decoders.UpdateUsersResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getBlockedUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _14;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/users/block', undefined, queryParams);
            (_14 = decoders.GetBlockedUsersResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.blockUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _15;
            const body = {
                blocked_user_id: request === null || request === void 0 ? void 0 : request.blocked_user_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/block', undefined, undefined, body);
            (_15 = decoders.BlockUsersResponse) === null || _15 === void 0 ? void 0 : _15.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deactivateUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _16;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,
                mark_channels_deleted: request === null || request === void 0 ? void 0 : request.mark_channels_deleted,
                mark_messages_deleted: request === null || request === void 0 ? void 0 : request.mark_messages_deleted,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/deactivate', undefined, undefined, body);
            (_16 = decoders.DeactivateUsersResponse) === null || _16 === void 0 ? void 0 : _16.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _17;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
                calls: request === null || request === void 0 ? void 0 : request.calls,
                conversations: request === null || request === void 0 ? void 0 : request.conversations,
                messages: request === null || request === void 0 ? void 0 : request.messages,
                new_call_owner_id: request === null || request === void 0 ? void 0 : request.new_call_owner_id,
                new_channel_owner_id: request === null || request === void 0 ? void 0 : request.new_channel_owner_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/delete', undefined, undefined, body);
            (_17 = decoders.DeleteUsersResponse) === null || _17 === void 0 ? void 0 : _17.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.reactivateUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _18;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,
                restore_channels: request === null || request === void 0 ? void 0 : request.restore_channels,
                restore_messages: request === null || request === void 0 ? void 0 : request.restore_messages,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/reactivate', undefined, undefined, body);
            (_18 = decoders.ReactivateUsersResponse) === null || _18 === void 0 ? void 0 : _18.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.restoreUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _19;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/restore', undefined, undefined, body);
            (_19 = decoders.Response) === null || _19 === void 0 ? void 0 : _19.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unblockUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _20;
            const body = {
                blocked_user_id: request === null || request === void 0 ? void 0 : request.blocked_user_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/unblock', undefined, undefined, body);
            (_20 = decoders.UnblockUsersResponse) === null || _20 === void 0 ? void 0 : _20.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deactivateUser = (request) => __awaiter(this, void 0, void 0, function* () {
            var _21;
            const pathParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const body = {
                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,
                mark_messages_deleted: request === null || request === void 0 ? void 0 : request.mark_messages_deleted,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/{user_id}/deactivate', pathParams, undefined, body);
            (_21 = decoders.DeactivateUserResponse) === null || _21 === void 0 ? void 0 : _21.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.exportUser = (request) => __awaiter(this, void 0, void 0, function* () {
            var _22;
            const pathParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/users/{user_id}/export', pathParams, undefined);
            (_22 = decoders.ExportUserResponse) === null || _22 === void 0 ? void 0 : _22.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.reactivateUser = (request) => __awaiter(this, void 0, void 0, function* () {
            var _23;
            const pathParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const body = {
                created_by_id: request === null || request === void 0 ? void 0 : request.created_by_id,
                name: request === null || request === void 0 ? void 0 : request.name,
                restore_messages: request === null || request === void 0 ? void 0 : request.restore_messages,
            };
            const response = yield this.sendRequest('POST', '/api/v2/users/{user_id}/reactivate', pathParams, undefined, body);
            (_23 = decoders.ReactivateUserResponse) === null || _23 === void 0 ? void 0 : _23.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
    }
}

class VideoApi extends BaseApi {
    constructor() {
        super(...arguments);
        this.queryCallMembers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const body = {
                id: request === null || request === void 0 ? void 0 : request.id,
                type: request === null || request === void 0 ? void 0 : request.type,
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/members', undefined, undefined, body);
            (_a = decoders.QueryCallMembersResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryCallStats = (request) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/stats', undefined, undefined, body);
            (_b = decoders.QueryCallStatsResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getCall = (request) => __awaiter(this, void 0, void 0, function* () {
            var _c;
            const queryParams = {
                members_limit: request === null || request === void 0 ? void 0 : request.members_limit,
                ring: request === null || request === void 0 ? void 0 : request.ring,
                notify: request === null || request === void 0 ? void 0 : request.notify,
                video: request === null || request === void 0 ? void 0 : request.video,
            };
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}', pathParams, queryParams);
            (_c = decoders.GetCallResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateCall = (request) => __awaiter(this, void 0, void 0, function* () {
            var _d;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                starts_at: request === null || request === void 0 ? void 0 : request.starts_at,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                settings_override: request === null || request === void 0 ? void 0 : request.settings_override,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body);
            (_d = decoders.UpdateCallResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getOrCreateCall = (request) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                members_limit: request === null || request === void 0 ? void 0 : request.members_limit,
                notify: request === null || request === void 0 ? void 0 : request.notify,
                ring: request === null || request === void 0 ? void 0 : request.ring,
                video: request === null || request === void 0 ? void 0 : request.video,
                data: request === null || request === void 0 ? void 0 : request.data,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body);
            (_e = decoders.GetOrCreateCallResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.blockUser = (request) => __awaiter(this, void 0, void 0, function* () {
            var _f;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/block', pathParams, undefined, body);
            (_f = decoders.BlockUserResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteCall = (request) => __awaiter(this, void 0, void 0, function* () {
            var _g;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                hard: request === null || request === void 0 ? void 0 : request.hard,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/delete', pathParams, undefined, body);
            (_g = decoders.DeleteCallResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.sendCallEvent = (request) => __awaiter(this, void 0, void 0, function* () {
            var _h;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/event', pathParams, undefined, body);
            (_h = decoders.SendCallEventResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.collectUserFeedback = (request) => __awaiter(this, void 0, void 0, function* () {
            var _j;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
                session: request === null || request === void 0 ? void 0 : request.session,
            };
            const body = {
                rating: request === null || request === void 0 ? void 0 : request.rating,
                sdk: request === null || request === void 0 ? void 0 : request.sdk,
                sdk_version: request === null || request === void 0 ? void 0 : request.sdk_version,
                user_session_id: request === null || request === void 0 ? void 0 : request.user_session_id,
                reason: request === null || request === void 0 ? void 0 : request.reason,
                custom: request === null || request === void 0 ? void 0 : request.custom,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/feedback/{session}', pathParams, undefined, body);
            (_j = decoders.CollectUserFeedbackResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.goLive = (request) => __awaiter(this, void 0, void 0, function* () {
            var _k;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                recording_storage_name: request === null || request === void 0 ? void 0 : request.recording_storage_name,
                start_hls: request === null || request === void 0 ? void 0 : request.start_hls,
                start_recording: request === null || request === void 0 ? void 0 : request.start_recording,
                start_rtmp_broadcasts: request === null || request === void 0 ? void 0 : request.start_rtmp_broadcasts,
                start_transcription: request === null || request === void 0 ? void 0 : request.start_transcription,
                transcription_storage_name: request === null || request === void 0 ? void 0 : request.transcription_storage_name,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/go_live', pathParams, undefined, body);
            (_k = decoders.GoLiveResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.endCall = (request) => __awaiter(this, void 0, void 0, function* () {
            var _l;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mark_ended', pathParams, undefined);
            (_l = decoders.EndCallResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateCallMembers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _m;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                remove_members: request === null || request === void 0 ? void 0 : request.remove_members,
                update_members: request === null || request === void 0 ? void 0 : request.update_members,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/members', pathParams, undefined, body);
            (_m = decoders.UpdateCallMembersResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.muteUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _o;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                audio: request === null || request === void 0 ? void 0 : request.audio,
                mute_all_users: request === null || request === void 0 ? void 0 : request.mute_all_users,
                muted_by_id: request === null || request === void 0 ? void 0 : request.muted_by_id,
                screenshare: request === null || request === void 0 ? void 0 : request.screenshare,
                screenshare_audio: request === null || request === void 0 ? void 0 : request.screenshare_audio,
                video: request === null || request === void 0 ? void 0 : request.video,
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
                muted_by: request === null || request === void 0 ? void 0 : request.muted_by,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mute_users', pathParams, undefined, body);
            (_o = decoders.MuteUsersResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.videoPin = (request) => __awaiter(this, void 0, void 0, function* () {
            var _p;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                session_id: request === null || request === void 0 ? void 0 : request.session_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/pin', pathParams, undefined, body);
            (_p = decoders.PinResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listRecordings = (request) => __awaiter(this, void 0, void 0, function* () {
            var _q;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/recordings', pathParams, undefined);
            (_q = decoders.ListRecordingsResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.startRTMPBroadcasts = (request) => __awaiter(this, void 0, void 0, function* () {
            var _r;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                broadcasts: request === null || request === void 0 ? void 0 : request.broadcasts,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts', pathParams, undefined, body);
            (_r = decoders.StartRTMPBroadcastsResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopAllRTMPBroadcasts = (request) => __awaiter(this, void 0, void 0, function* () {
            var _s;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/stop', pathParams, undefined);
            (_s = decoders.StopAllRTMPBroadcastsResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopRTMPBroadcast = (request) => __awaiter(this, void 0, void 0, function* () {
            var _t;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {};
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/{name}/stop', pathParams, undefined, body);
            (_t = decoders.StopRTMPBroadcastsResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.startHLSBroadcasting = (request) => __awaiter(this, void 0, void 0, function* () {
            var _u;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_broadcasting', pathParams, undefined);
            (_u = decoders.StartHLSBroadcastingResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.startRecording = (request) => __awaiter(this, void 0, void 0, function* () {
            var _v;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                recording_external_storage: request === null || request === void 0 ? void 0 : request.recording_external_storage,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_recording', pathParams, undefined, body);
            (_v = decoders.StartRecordingResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.startTranscription = (request) => __awaiter(this, void 0, void 0, function* () {
            var _w;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                transcription_external_storage: request === null || request === void 0 ? void 0 : request.transcription_external_storage,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_transcription', pathParams, undefined, body);
            (_w = decoders.StartTranscriptionResponse) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getCallStats = (request) => __awaiter(this, void 0, void 0, function* () {
            var _x;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
                session: request === null || request === void 0 ? void 0 : request.session,
            };
            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/stats/{session}', pathParams, undefined);
            (_x = decoders.GetCallStatsResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopHLSBroadcasting = (request) => __awaiter(this, void 0, void 0, function* () {
            var _y;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_broadcasting', pathParams, undefined);
            (_y = decoders.StopHLSBroadcastingResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopLive = (request) => __awaiter(this, void 0, void 0, function* () {
            var _z;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_live', pathParams, undefined);
            (_z = decoders.StopLiveResponse) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopRecording = (request) => __awaiter(this, void 0, void 0, function* () {
            var _0;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_recording', pathParams, undefined);
            (_0 = decoders.StopRecordingResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.stopTranscription = (request) => __awaiter(this, void 0, void 0, function* () {
            var _1;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_transcription', pathParams, undefined);
            (_1 = decoders.StopTranscriptionResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listTranscriptions = (request) => __awaiter(this, void 0, void 0, function* () {
            var _2;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/video/call/{type}/{id}/transcriptions', pathParams, undefined);
            (_2 = decoders.ListTranscriptionsResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unblockUser = (request) => __awaiter(this, void 0, void 0, function* () {
            var _3;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unblock', pathParams, undefined, body);
            (_3 = decoders.UnblockUserResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.videoUnpin = (request) => __awaiter(this, void 0, void 0, function* () {
            var _4;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                session_id: request === null || request === void 0 ? void 0 : request.session_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unpin', pathParams, undefined, body);
            (_4 = decoders.UnpinResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateUserPermissions = (request) => __awaiter(this, void 0, void 0, function* () {
            var _5;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                grant_permissions: request === null || request === void 0 ? void 0 : request.grant_permissions,
                revoke_permissions: request === null || request === void 0 ? void 0 : request.revoke_permissions,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/call/{type}/{id}/user_permissions', pathParams, undefined, body);
            (_5 = decoders.UpdateUserPermissionsResponse) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteRecording = (request) => __awaiter(this, void 0, void 0, function* () {
            var _6;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
                session: request === null || request === void 0 ? void 0 : request.session,
                filename: request === null || request === void 0 ? void 0 : request.filename,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/recordings/{filename}', pathParams, undefined);
            (_6 = decoders.DeleteRecordingResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteTranscription = (request) => __awaiter(this, void 0, void 0, function* () {
            var _7;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
                session: request === null || request === void 0 ? void 0 : request.session,
                filename: request === null || request === void 0 ? void 0 : request.filename,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/transcriptions/{filename}', pathParams, undefined);
            (_7 = decoders.DeleteTranscriptionResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryCalls = (request) => __awaiter(this, void 0, void 0, function* () {
            var _8;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/calls', undefined, undefined, body);
            (_8 = decoders.QueryCallsResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listCallTypes = () => __awaiter(this, void 0, void 0, function* () {
            var _9;
            const response = yield this.sendRequest('GET', '/api/v2/video/calltypes', undefined, undefined);
            (_9 = decoders.ListCallTypeResponse) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createCallType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _10;
            const body = {
                name: request === null || request === void 0 ? void 0 : request.name,
                external_storage: request === null || request === void 0 ? void 0 : request.external_storage,
                grants: request === null || request === void 0 ? void 0 : request.grants,
                notification_settings: request === null || request === void 0 ? void 0 : request.notification_settings,
                settings: request === null || request === void 0 ? void 0 : request.settings,
            };
            const response = yield this.sendRequest('POST', '/api/v2/video/calltypes', undefined, undefined, body);
            (_10 = decoders.CreateCallTypeResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteCallType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _11;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/video/calltypes/{name}', pathParams, undefined);
            (_11 = decoders.Response) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getCallType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _12;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('GET', '/api/v2/video/calltypes/{name}', pathParams, undefined);
            (_12 = decoders.GetCallTypeResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateCallType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _13;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {
                external_storage: request === null || request === void 0 ? void 0 : request.external_storage,
                grants: request === null || request === void 0 ? void 0 : request.grants,
                notification_settings: request === null || request === void 0 ? void 0 : request.notification_settings,
                settings: request === null || request === void 0 ? void 0 : request.settings,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/video/calltypes/{name}', pathParams, undefined, body);
            (_13 = decoders.UpdateCallTypeResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getEdges = () => __awaiter(this, void 0, void 0, function* () {
            var _14;
            const response = yield this.sendRequest('GET', '/api/v2/video/edges', undefined, undefined);
            (_14 = decoders.GetEdgesResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
    }
}

class CallApi {
    constructor(videoApi, type, id) {
        this.videoApi = videoApi;
        this.type = type;
        this.id = id;
        this.get = (request) => {
            return this.videoApi.getCall(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.update = (request) => {
            return this.videoApi.updateCall(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.getOrCreate = (request) => {
            return this.videoApi.getOrCreateCall(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.blockUser = (request) => {
            return this.videoApi.blockUser(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.delete = (request) => {
            return this.videoApi.deleteCall(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.sendCallEvent = (request) => {
            return this.videoApi.sendCallEvent(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.collectUserFeedback = (request) => {
            return this.videoApi.collectUserFeedback(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.goLive = (request) => {
            return this.videoApi.goLive(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.end = () => {
            return this.videoApi.endCall({ id: this.id, type: this.type });
        };
        this.updateCallMembers = (request) => {
            return this.videoApi.updateCallMembers(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.muteUsers = (request) => {
            return this.videoApi.muteUsers(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.videoPin = (request) => {
            return this.videoApi.videoPin(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.listRecordings = () => {
            return this.videoApi.listRecordings({ id: this.id, type: this.type });
        };
        this.startRTMPBroadcasts = (request) => {
            return this.videoApi.startRTMPBroadcasts(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.stopAllRTMPBroadcasts = () => {
            return this.videoApi.stopAllRTMPBroadcasts({
                id: this.id,
                type: this.type,
            });
        };
        this.stopRTMPBroadcast = (request) => {
            return this.videoApi.stopRTMPBroadcast(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.startHLSBroadcasting = () => {
            return this.videoApi.startHLSBroadcasting({ id: this.id, type: this.type });
        };
        this.startRecording = (request) => {
            return this.videoApi.startRecording(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.startTranscription = (request) => {
            return this.videoApi.startTranscription(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.getCallStats = (request) => {
            return this.videoApi.getCallStats(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.stopHLSBroadcasting = () => {
            return this.videoApi.stopHLSBroadcasting({ id: this.id, type: this.type });
        };
        this.stopLive = () => {
            return this.videoApi.stopLive({ id: this.id, type: this.type });
        };
        this.stopRecording = () => {
            return this.videoApi.stopRecording({ id: this.id, type: this.type });
        };
        this.stopTranscription = () => {
            return this.videoApi.stopTranscription({ id: this.id, type: this.type });
        };
        this.listTranscriptions = () => {
            return this.videoApi.listTranscriptions({ id: this.id, type: this.type });
        };
        this.unblockUser = (request) => {
            return this.videoApi.unblockUser(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.videoUnpin = (request) => {
            return this.videoApi.videoUnpin(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.updateUserPermissions = (request) => {
            return this.videoApi.updateUserPermissions(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.deleteRecording = (request) => {
            return this.videoApi.deleteRecording(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.deleteTranscription = (request) => {
            return this.videoApi.deleteTranscription(Object.assign({ id: this.id, type: this.type }, request));
        };
    }
}

class StreamCall extends CallApi {
    constructor() {
        super(...arguments);
        this.create = this.getOrCreate;
        this.queryMembers = (request) => {
            return this.videoApi.queryCallMembers(Object.assign({ id: this.id, type: this.type }, (request !== null && request !== void 0 ? request : {})));
        };
    }
    get cid() {
        return `${this.type}:${this.id}`;
    }
}

class StreamVideoClient extends VideoApi {
    constructor() {
        super(...arguments);
        this.call = (type, id) => {
            return new StreamCall(this, type, id);
        };
    }
}

class ChatApi extends BaseApi {
    constructor() {
        super(...arguments);
        this.queryChannels = (request) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,
                message_limit: request === null || request === void 0 ? void 0 : request.message_limit,
                offset: request === null || request === void 0 ? void 0 : request.offset,
                state: request === null || request === void 0 ? void 0 : request.state,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter_conditions: request === null || request === void 0 ? void 0 : request.filter_conditions,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels', undefined, undefined, body);
            (_a = decoders.QueryChannelsResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteChannels = (request) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            const body = {
                cids: request === null || request === void 0 ? void 0 : request.cids,
                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/delete', undefined, undefined, body);
            (_b = decoders.DeleteChannelsResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.markChannelsRead = (request) => __awaiter(this, void 0, void 0, function* () {
            var _c;
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                read_by_channel: request === null || request === void 0 ? void 0 : request.read_by_channel,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/read', undefined, undefined, body);
            (_c = decoders.MarkReadResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getOrCreateDistinctChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _d;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
            };
            const body = {
                hide_for_creator: request === null || request === void 0 ? void 0 : request.hide_for_creator,
                state: request === null || request === void 0 ? void 0 : request.state,
                thread_unread_counts: request === null || request === void 0 ? void 0 : request.thread_unread_counts,
                data: request === null || request === void 0 ? void 0 : request.data,
                members: request === null || request === void 0 ? void 0 : request.members,
                messages: request === null || request === void 0 ? void 0 : request.messages,
                watchers: request === null || request === void 0 ? void 0 : request.watchers,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/query', pathParams, undefined, body);
            (_d = decoders.ChannelStateResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            const queryParams = {
                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,
            };
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}', pathParams, queryParams);
            (_e = decoders.DeleteChannelResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateChannelPartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _f;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                unset: request === null || request === void 0 ? void 0 : request.unset,
                set: request === null || request === void 0 ? void 0 : request.set,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body);
            (_f = decoders.UpdateChannelPartialResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _g;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                accept_invite: request === null || request === void 0 ? void 0 : request.accept_invite,
                cooldown: request === null || request === void 0 ? void 0 : request.cooldown,
                hide_history: request === null || request === void 0 ? void 0 : request.hide_history,
                reject_invite: request === null || request === void 0 ? void 0 : request.reject_invite,
                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                add_members: request === null || request === void 0 ? void 0 : request.add_members,
                add_moderators: request === null || request === void 0 ? void 0 : request.add_moderators,
                assign_roles: request === null || request === void 0 ? void 0 : request.assign_roles,
                demote_moderators: request === null || request === void 0 ? void 0 : request.demote_moderators,
                invites: request === null || request === void 0 ? void 0 : request.invites,
                remove_members: request === null || request === void 0 ? void 0 : request.remove_members,
                data: request === null || request === void 0 ? void 0 : request.data,
                message: request === null || request === void 0 ? void 0 : request.message,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body);
            (_g = decoders.UpdateChannelResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.sendEvent = (request) => __awaiter(this, void 0, void 0, function* () {
            var _h;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                event: request === null || request === void 0 ? void 0 : request.event,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/event', pathParams, undefined, body);
            (_h = decoders.EventResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteFile = (request) => __awaiter(this, void 0, void 0, function* () {
            var _j;
            const queryParams = {
                url: request === null || request === void 0 ? void 0 : request.url,
            };
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/file', pathParams, queryParams);
            (_j = decoders.Response) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.uploadFile = (request) => __awaiter(this, void 0, void 0, function* () {
            var _k;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                file: request === null || request === void 0 ? void 0 : request.file,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/file', pathParams, undefined, body);
            (_k = decoders.FileUploadResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.hideChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _l;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                clear_history: request === null || request === void 0 ? void 0 : request.clear_history,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/hide', pathParams, undefined, body);
            (_l = decoders.HideChannelResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteImage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _m;
            const queryParams = {
                url: request === null || request === void 0 ? void 0 : request.url,
            };
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/image', pathParams, queryParams);
            (_m = decoders.Response) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.uploadImage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _o;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                file: request === null || request === void 0 ? void 0 : request.file,
                upload_sizes: request === null || request === void 0 ? void 0 : request.upload_sizes,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/image', pathParams, undefined, body);
            (_o = decoders.ImageUploadResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateMemberPartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _p;
            const pathParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                unset: request === null || request === void 0 ? void 0 : request.unset,
                set: request === null || request === void 0 ? void 0 : request.set,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}/member/{user_id}', pathParams, undefined, body);
            (_p = decoders.UpdateMemberPartialResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.sendMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _q;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                message: request === null || request === void 0 ? void 0 : request.message,
                force_moderation: request === null || request === void 0 ? void 0 : request.force_moderation,
                keep_channel_hidden: request === null || request === void 0 ? void 0 : request.keep_channel_hidden,
                pending: request === null || request === void 0 ? void 0 : request.pending,
                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,
                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,
                pending_message_metadata: request === null || request === void 0 ? void 0 : request.pending_message_metadata,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/message', pathParams, undefined, body);
            (_q = decoders.SendMessageResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getManyMessages = (request) => __awaiter(this, void 0, void 0, function* () {
            var _r;
            const queryParams = {
                ids: request === null || request === void 0 ? void 0 : request.ids,
            };
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/channels/{type}/{id}/messages', pathParams, queryParams);
            (_r = decoders.GetManyMessagesResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getOrCreateChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _s;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                hide_for_creator: request === null || request === void 0 ? void 0 : request.hide_for_creator,
                state: request === null || request === void 0 ? void 0 : request.state,
                thread_unread_counts: request === null || request === void 0 ? void 0 : request.thread_unread_counts,
                data: request === null || request === void 0 ? void 0 : request.data,
                members: request === null || request === void 0 ? void 0 : request.members,
                messages: request === null || request === void 0 ? void 0 : request.messages,
                watchers: request === null || request === void 0 ? void 0 : request.watchers,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/query', pathParams, undefined, body);
            (_s = decoders.ChannelStateResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.markRead = (request) => __awaiter(this, void 0, void 0, function* () {
            var _t;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
                thread_id: request === null || request === void 0 ? void 0 : request.thread_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/read', pathParams, undefined, body);
            (_t = decoders.MarkReadResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.showChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _u;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/show', pathParams, undefined, body);
            (_u = decoders.ShowChannelResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.truncateChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _v;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                hard_delete: request === null || request === void 0 ? void 0 : request.hard_delete,
                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,
                truncated_at: request === null || request === void 0 ? void 0 : request.truncated_at,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                message: request === null || request === void 0 ? void 0 : request.message,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/truncate', pathParams, undefined, body);
            (_v = decoders.TruncateChannelResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.markUnread = (request) => __awaiter(this, void 0, void 0, function* () {
            var _w;
            const pathParams = {
                type: request === null || request === void 0 ? void 0 : request.type,
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
                thread_id: request === null || request === void 0 ? void 0 : request.thread_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/unread', pathParams, undefined, body);
            (_w = decoders.Response) === null || _w === void 0 ? void 0 : _w.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listChannelTypes = () => __awaiter(this, void 0, void 0, function* () {
            var _x;
            const response = yield this.sendRequest('GET', '/api/v2/chat/channeltypes', undefined, undefined);
            (_x = decoders.ListChannelTypesResponse) === null || _x === void 0 ? void 0 : _x.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createChannelType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _y;
            const body = {
                automod: request === null || request === void 0 ? void 0 : request.automod,
                automod_behavior: request === null || request === void 0 ? void 0 : request.automod_behavior,
                max_message_length: request === null || request === void 0 ? void 0 : request.max_message_length,
                name: request === null || request === void 0 ? void 0 : request.name,
                blocklist: request === null || request === void 0 ? void 0 : request.blocklist,
                blocklist_behavior: request === null || request === void 0 ? void 0 : request.blocklist_behavior,
                connect_events: request === null || request === void 0 ? void 0 : request.connect_events,
                custom_events: request === null || request === void 0 ? void 0 : request.custom_events,
                mark_messages_pending: request === null || request === void 0 ? void 0 : request.mark_messages_pending,
                message_retention: request === null || request === void 0 ? void 0 : request.message_retention,
                mutes: request === null || request === void 0 ? void 0 : request.mutes,
                partition_size: request === null || request === void 0 ? void 0 : request.partition_size,
                partition_ttl: request === null || request === void 0 ? void 0 : request.partition_ttl,
                polls: request === null || request === void 0 ? void 0 : request.polls,
                push_notifications: request === null || request === void 0 ? void 0 : request.push_notifications,
                reactions: request === null || request === void 0 ? void 0 : request.reactions,
                read_events: request === null || request === void 0 ? void 0 : request.read_events,
                replies: request === null || request === void 0 ? void 0 : request.replies,
                search: request === null || request === void 0 ? void 0 : request.search,
                typing_events: request === null || request === void 0 ? void 0 : request.typing_events,
                uploads: request === null || request === void 0 ? void 0 : request.uploads,
                url_enrichment: request === null || request === void 0 ? void 0 : request.url_enrichment,
                blocklists: request === null || request === void 0 ? void 0 : request.blocklists,
                commands: request === null || request === void 0 ? void 0 : request.commands,
                permissions: request === null || request === void 0 ? void 0 : request.permissions,
                grants: request === null || request === void 0 ? void 0 : request.grants,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/channeltypes', undefined, undefined, body);
            (_y = decoders.CreateChannelTypeResponse) === null || _y === void 0 ? void 0 : _y.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteChannelType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _z;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);
            (_z = decoders.Response) === null || _z === void 0 ? void 0 : _z.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getChannelType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _0;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);
            (_0 = decoders.GetChannelTypeResponse) === null || _0 === void 0 ? void 0 : _0.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateChannelType = (request) => __awaiter(this, void 0, void 0, function* () {
            var _1;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {
                automod: request === null || request === void 0 ? void 0 : request.automod,
                automod_behavior: request === null || request === void 0 ? void 0 : request.automod_behavior,
                max_message_length: request === null || request === void 0 ? void 0 : request.max_message_length,
                blocklist: request === null || request === void 0 ? void 0 : request.blocklist,
                blocklist_behavior: request === null || request === void 0 ? void 0 : request.blocklist_behavior,
                connect_events: request === null || request === void 0 ? void 0 : request.connect_events,
                custom_events: request === null || request === void 0 ? void 0 : request.custom_events,
                mark_messages_pending: request === null || request === void 0 ? void 0 : request.mark_messages_pending,
                mutes: request === null || request === void 0 ? void 0 : request.mutes,
                partition_size: request === null || request === void 0 ? void 0 : request.partition_size,
                partition_ttl: request === null || request === void 0 ? void 0 : request.partition_ttl,
                polls: request === null || request === void 0 ? void 0 : request.polls,
                push_notifications: request === null || request === void 0 ? void 0 : request.push_notifications,
                quotes: request === null || request === void 0 ? void 0 : request.quotes,
                reactions: request === null || request === void 0 ? void 0 : request.reactions,
                read_events: request === null || request === void 0 ? void 0 : request.read_events,
                reminders: request === null || request === void 0 ? void 0 : request.reminders,
                replies: request === null || request === void 0 ? void 0 : request.replies,
                search: request === null || request === void 0 ? void 0 : request.search,
                typing_events: request === null || request === void 0 ? void 0 : request.typing_events,
                uploads: request === null || request === void 0 ? void 0 : request.uploads,
                url_enrichment: request === null || request === void 0 ? void 0 : request.url_enrichment,
                allowed_flag_reasons: request === null || request === void 0 ? void 0 : request.allowed_flag_reasons,
                blocklists: request === null || request === void 0 ? void 0 : request.blocklists,
                commands: request === null || request === void 0 ? void 0 : request.commands,
                permissions: request === null || request === void 0 ? void 0 : request.permissions,
                automod_thresholds: request === null || request === void 0 ? void 0 : request.automod_thresholds,
                grants: request === null || request === void 0 ? void 0 : request.grants,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/chat/channeltypes/{name}', pathParams, undefined, body);
            (_1 = decoders.UpdateChannelTypeResponse) === null || _1 === void 0 ? void 0 : _1.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.listCommands = () => __awaiter(this, void 0, void 0, function* () {
            var _2;
            const response = yield this.sendRequest('GET', '/api/v2/chat/commands', undefined, undefined);
            (_2 = decoders.ListCommandsResponse) === null || _2 === void 0 ? void 0 : _2.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createCommand = (request) => __awaiter(this, void 0, void 0, function* () {
            var _3;
            const body = {
                description: request === null || request === void 0 ? void 0 : request.description,
                name: request === null || request === void 0 ? void 0 : request.name,
                args: request === null || request === void 0 ? void 0 : request.args,
                set: request === null || request === void 0 ? void 0 : request.set,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/commands', undefined, undefined, body);
            (_3 = decoders.CreateCommandResponse) === null || _3 === void 0 ? void 0 : _3.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteCommand = (request) => __awaiter(this, void 0, void 0, function* () {
            var _4;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/commands/{name}', pathParams, undefined);
            (_4 = decoders.DeleteCommandResponse) === null || _4 === void 0 ? void 0 : _4.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getCommand = (request) => __awaiter(this, void 0, void 0, function* () {
            var _5;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/commands/{name}', pathParams, undefined);
            (_5 = decoders.GetCommandResponse) === null || _5 === void 0 ? void 0 : _5.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateCommand = (request) => __awaiter(this, void 0, void 0, function* () {
            var _6;
            const pathParams = {
                name: request === null || request === void 0 ? void 0 : request.name,
            };
            const body = {
                description: request === null || request === void 0 ? void 0 : request.description,
                args: request === null || request === void 0 ? void 0 : request.args,
                set: request === null || request === void 0 ? void 0 : request.set,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/chat/commands/{name}', pathParams, undefined, body);
            (_6 = decoders.UpdateCommandResponse) === null || _6 === void 0 ? void 0 : _6.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.exportChannels = (request) => __awaiter(this, void 0, void 0, function* () {
            var _7;
            const body = {
                channels: request === null || request === void 0 ? void 0 : request.channels,
                clear_deleted_message_text: request === null || request === void 0 ? void 0 : request.clear_deleted_message_text,
                export_users: request === null || request === void 0 ? void 0 : request.export_users,
                include_soft_deleted_channels: request === null || request === void 0 ? void 0 : request.include_soft_deleted_channels,
                include_truncated_messages: request === null || request === void 0 ? void 0 : request.include_truncated_messages,
                version: request === null || request === void 0 ? void 0 : request.version,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/export_channels', undefined, undefined, body);
            (_7 = decoders.ExportChannelsResponse) === null || _7 === void 0 ? void 0 : _7.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getExportChannelsStatus = (request) => __awaiter(this, void 0, void 0, function* () {
            var _8;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/export_channels/{id}', pathParams, undefined);
            (_8 = decoders.GetExportChannelsStatusResponse) === null || _8 === void 0 ? void 0 : _8.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryMembers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _9;
            const queryParams = {
                payload: request === null || request === void 0 ? void 0 : request.payload,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/members', undefined, queryParams);
            (_9 = decoders.MembersResponse) === null || _9 === void 0 ? void 0 : _9.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryMessageHistory = (request) => __awaiter(this, void 0, void 0, function* () {
            var _10;
            const body = {
                filter: request === null || request === void 0 ? void 0 : request.filter,
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/history', undefined, undefined, body);
            (_10 = decoders.QueryMessageHistoryResponse) === null || _10 === void 0 ? void 0 : _10.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _11;
            const queryParams = {
                hard: request === null || request === void 0 ? void 0 : request.hard,
                deleted_by: request === null || request === void 0 ? void 0 : request.deleted_by,
            };
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{id}', pathParams, queryParams);
            (_11 = decoders.DeleteMessageResponse) === null || _11 === void 0 ? void 0 : _11.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _12;
            const queryParams = {
                show_deleted_message: request === null || request === void 0 ? void 0 : request.show_deleted_message,
            };
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{id}', pathParams, queryParams);
            (_12 = decoders.GetMessageResponse) === null || _12 === void 0 ? void 0 : _12.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _13;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                message: request === null || request === void 0 ? void 0 : request.message,
                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}', pathParams, undefined, body);
            (_13 = decoders.UpdateMessageResponse) === null || _13 === void 0 ? void 0 : _13.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateMessagePartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _14;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                unset: request === null || request === void 0 ? void 0 : request.unset,
                set: request === null || request === void 0 ? void 0 : request.set,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/chat/messages/{id}', pathParams, undefined, body);
            (_14 = decoders.UpdateMessagePartialResponse) === null || _14 === void 0 ? void 0 : _14.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.runMessageAction = (request) => __awaiter(this, void 0, void 0, function* () {
            var _15;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                form_data: request === null || request === void 0 ? void 0 : request.form_data,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/action', pathParams, undefined, body);
            (_15 = decoders.MessageResponse) === null || _15 === void 0 ? void 0 : _15.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.commitMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _16;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {};
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/commit', pathParams, undefined, body);
            (_16 = decoders.MessageResponse) === null || _16 === void 0 ? void 0 : _16.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.sendReaction = (request) => __awaiter(this, void 0, void 0, function* () {
            var _17;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                reaction: request === null || request === void 0 ? void 0 : request.reaction,
                enforce_unique: request === null || request === void 0 ? void 0 : request.enforce_unique,
                skip_push: request === null || request === void 0 ? void 0 : request.skip_push,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/reaction', pathParams, undefined, body);
            (_17 = decoders.SendReactionResponse) === null || _17 === void 0 ? void 0 : _17.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deleteReaction = (request) => __awaiter(this, void 0, void 0, function* () {
            var _18;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
                type: request === null || request === void 0 ? void 0 : request.type,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{id}/reaction/{type}', pathParams, queryParams);
            (_18 = decoders.ReactionRemovalResponse) === null || _18 === void 0 ? void 0 : _18.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getReactions = (request) => __awaiter(this, void 0, void 0, function* () {
            var _19;
            const queryParams = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                offset: request === null || request === void 0 ? void 0 : request.offset,
            };
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{id}/reactions', pathParams, queryParams);
            (_19 = decoders.GetReactionsResponse) === null || _19 === void 0 ? void 0 : _19.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryReactions = (request) => __awaiter(this, void 0, void 0, function* () {
            var _20;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/reactions', pathParams, undefined, body);
            (_20 = decoders.QueryReactionsResponse) === null || _20 === void 0 ? void 0 : _20.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.translateMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _21;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                language: request === null || request === void 0 ? void 0 : request.language,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/translate', pathParams, undefined, body);
            (_21 = decoders.MessageResponse) === null || _21 === void 0 ? void 0 : _21.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.undeleteMessage = (request) => __awaiter(this, void 0, void 0, function* () {
            var _22;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const body = {
                message: request === null || request === void 0 ? void 0 : request.message,
                skip_enrich_url: request === null || request === void 0 ? void 0 : request.skip_enrich_url,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{id}/undelete', pathParams, undefined, body);
            (_22 = decoders.UpdateMessageResponse) === null || _22 === void 0 ? void 0 : _22.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.castPollVote = (request) => __awaiter(this, void 0, void 0, function* () {
            var _23;
            const pathParams = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
                vote: request === null || request === void 0 ? void 0 : request.vote,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote', pathParams, undefined, body);
            (_23 = decoders.PollVoteResponse) === null || _23 === void 0 ? void 0 : _23.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.removePollVote = (request) => __awaiter(this, void 0, void 0, function* () {
            var _24;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
                vote_id: request === null || request === void 0 ? void 0 : request.vote_id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote/{vote_id}', pathParams, queryParams);
            (_24 = decoders.PollVoteResponse) === null || _24 === void 0 ? void 0 : _24.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getReplies = (request) => __awaiter(this, void 0, void 0, function* () {
            var _25;
            const queryParams = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                offset: request === null || request === void 0 ? void 0 : request.offset,
                id_gte: request === null || request === void 0 ? void 0 : request.id_gte,
                id_gt: request === null || request === void 0 ? void 0 : request.id_gt,
                id_lte: request === null || request === void 0 ? void 0 : request.id_lte,
                id_lt: request === null || request === void 0 ? void 0 : request.id_lt,
                created_at_after_or_equal: request === null || request === void 0 ? void 0 : request.created_at_after_or_equal,
                created_at_after: request === null || request === void 0 ? void 0 : request.created_at_after,
                created_at_before_or_equal: request === null || request === void 0 ? void 0 : request.created_at_before_or_equal,
                created_at_before: request === null || request === void 0 ? void 0 : request.created_at_before,
                id_around: request === null || request === void 0 ? void 0 : request.id_around,
                created_at_around: request === null || request === void 0 ? void 0 : request.created_at_around,
                sort: request === null || request === void 0 ? void 0 : request.sort,
            };
            const pathParams = {
                parent_id: request === null || request === void 0 ? void 0 : request.parent_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/messages/{parent_id}/replies', pathParams, queryParams);
            (_25 = decoders.GetRepliesResponse) === null || _25 === void 0 ? void 0 : _25.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryMessageFlags = (request) => __awaiter(this, void 0, void 0, function* () {
            var _26;
            const queryParams = {
                payload: request === null || request === void 0 ? void 0 : request.payload,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/moderation/flags/message', undefined, queryParams);
            (_26 = decoders.QueryMessageFlagsResponse) === null || _26 === void 0 ? void 0 : _26.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.muteChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _27;
            const body = {
                expiration: request === null || request === void 0 ? void 0 : request.expiration,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                channel_cids: request === null || request === void 0 ? void 0 : request.channel_cids,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/moderation/mute/channel', undefined, undefined, body);
            (_27 = decoders.MuteChannelResponse) === null || _27 === void 0 ? void 0 : _27.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unmuteChannel = (request) => __awaiter(this, void 0, void 0, function* () {
            var _28;
            const body = {
                expiration: request === null || request === void 0 ? void 0 : request.expiration,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                channel_cids: request === null || request === void 0 ? void 0 : request.channel_cids,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/moderation/unmute/channel', undefined, undefined, body);
            (_28 = decoders.UnmuteResponse) === null || _28 === void 0 ? void 0 : _28.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createPoll = (request) => __awaiter(this, void 0, void 0, function* () {
            var _29;
            const body = {
                name: request === null || request === void 0 ? void 0 : request.name,
                allow_answers: request === null || request === void 0 ? void 0 : request.allow_answers,
                allow_user_suggested_options: request === null || request === void 0 ? void 0 : request.allow_user_suggested_options,
                description: request === null || request === void 0 ? void 0 : request.description,
                enforce_unique_vote: request === null || request === void 0 ? void 0 : request.enforce_unique_vote,
                id: request === null || request === void 0 ? void 0 : request.id,
                is_closed: request === null || request === void 0 ? void 0 : request.is_closed,
                max_votes_allowed: request === null || request === void 0 ? void 0 : request.max_votes_allowed,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                voting_visibility: request === null || request === void 0 ? void 0 : request.voting_visibility,
                options: request === null || request === void 0 ? void 0 : request.options,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/polls', undefined, undefined, body);
            (_29 = decoders.PollResponse) === null || _29 === void 0 ? void 0 : _29.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updatePoll = (request) => __awaiter(this, void 0, void 0, function* () {
            var _30;
            const body = {
                id: request === null || request === void 0 ? void 0 : request.id,
                name: request === null || request === void 0 ? void 0 : request.name,
                allow_answers: request === null || request === void 0 ? void 0 : request.allow_answers,
                allow_user_suggested_options: request === null || request === void 0 ? void 0 : request.allow_user_suggested_options,
                description: request === null || request === void 0 ? void 0 : request.description,
                enforce_unique_vote: request === null || request === void 0 ? void 0 : request.enforce_unique_vote,
                is_closed: request === null || request === void 0 ? void 0 : request.is_closed,
                max_votes_allowed: request === null || request === void 0 ? void 0 : request.max_votes_allowed,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                voting_visibility: request === null || request === void 0 ? void 0 : request.voting_visibility,
                options: request === null || request === void 0 ? void 0 : request.options,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/chat/polls', undefined, undefined, body);
            (_30 = decoders.PollResponse) === null || _30 === void 0 ? void 0 : _30.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryPolls = (request) => __awaiter(this, void 0, void 0, function* () {
            var _31;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/query', undefined, queryParams, body);
            (_31 = decoders.QueryPollsResponse) === null || _31 === void 0 ? void 0 : _31.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deletePoll = (request) => __awaiter(this, void 0, void 0, function* () {
            var _32;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/polls/{poll_id}', pathParams, queryParams);
            (_32 = decoders.Response) === null || _32 === void 0 ? void 0 : _32.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getPoll = (request) => __awaiter(this, void 0, void 0, function* () {
            var _33;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/polls/{poll_id}', pathParams, queryParams);
            (_33 = decoders.PollResponse) === null || _33 === void 0 ? void 0 : _33.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updatePollPartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _34;
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                unset: request === null || request === void 0 ? void 0 : request.unset,
                set: request === null || request === void 0 ? void 0 : request.set,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/chat/polls/{poll_id}', pathParams, undefined, body);
            (_34 = decoders.PollResponse) === null || _34 === void 0 ? void 0 : _34.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.createPollOption = (request) => __awaiter(this, void 0, void 0, function* () {
            var _35;
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const body = {
                text: request === null || request === void 0 ? void 0 : request.text,
                position: request === null || request === void 0 ? void 0 : request.position,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/{poll_id}/options', pathParams, undefined, body);
            (_35 = decoders.PollOptionResponse) === null || _35 === void 0 ? void 0 : _35.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updatePollOption = (request) => __awaiter(this, void 0, void 0, function* () {
            var _36;
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const body = {
                id: request === null || request === void 0 ? void 0 : request.id,
                text: request === null || request === void 0 ? void 0 : request.text,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PUT', '/api/v2/chat/polls/{poll_id}/options', pathParams, undefined, body);
            (_36 = decoders.PollOptionResponse) === null || _36 === void 0 ? void 0 : _36.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.deletePollOption = (request) => __awaiter(this, void 0, void 0, function* () {
            var _37;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
                option_id: request === null || request === void 0 ? void 0 : request.option_id,
            };
            const response = yield this.sendRequest('DELETE', '/api/v2/chat/polls/{poll_id}/options/{option_id}', pathParams, queryParams);
            (_37 = decoders.Response) === null || _37 === void 0 ? void 0 : _37.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getPollOption = (request) => __awaiter(this, void 0, void 0, function* () {
            var _38;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
                option_id: request === null || request === void 0 ? void 0 : request.option_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/polls/{poll_id}/options/{option_id}', pathParams, queryParams);
            (_38 = decoders.PollOptionResponse) === null || _38 === void 0 ? void 0 : _38.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryPollVotes = (request) => __awaiter(this, void 0, void 0, function* () {
            var _39;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const pathParams = {
                poll_id: request === null || request === void 0 ? void 0 : request.poll_id,
            };
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/polls/{poll_id}/votes', pathParams, queryParams, body);
            (_39 = decoders.PollVotesResponse) === null || _39 === void 0 ? void 0 : _39.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryBannedUsers = (request) => __awaiter(this, void 0, void 0, function* () {
            var _40;
            const queryParams = {
                payload: request === null || request === void 0 ? void 0 : request.payload,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/query_banned_users', undefined, queryParams);
            (_40 = decoders.QueryBannedUsersResponse) === null || _40 === void 0 ? void 0 : _40.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.search = (request) => __awaiter(this, void 0, void 0, function* () {
            var _41;
            const queryParams = {
                payload: request === null || request === void 0 ? void 0 : request.payload,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/search', undefined, queryParams);
            (_41 = decoders.SearchResponse) === null || _41 === void 0 ? void 0 : _41.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryThreads = (request) => __awaiter(this, void 0, void 0, function* () {
            var _42;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                participant_limit: request === null || request === void 0 ? void 0 : request.participant_limit,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                reply_limit: request === null || request === void 0 ? void 0 : request.reply_limit,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/threads', undefined, undefined, body);
            (_42 = decoders.QueryThreadsResponse) === null || _42 === void 0 ? void 0 : _42.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getThread = (request) => __awaiter(this, void 0, void 0, function* () {
            var _43;
            const queryParams = {
                connection_id: request === null || request === void 0 ? void 0 : request.connection_id,
                reply_limit: request === null || request === void 0 ? void 0 : request.reply_limit,
                participant_limit: request === null || request === void 0 ? void 0 : request.participant_limit,
                member_limit: request === null || request === void 0 ? void 0 : request.member_limit,
            };
            const pathParams = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/chat/threads/{message_id}', pathParams, queryParams);
            (_43 = decoders.GetThreadResponse) === null || _43 === void 0 ? void 0 : _43.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.updateThreadPartial = (request) => __awaiter(this, void 0, void 0, function* () {
            var _44;
            const pathParams = {
                message_id: request === null || request === void 0 ? void 0 : request.message_id,
            };
            const body = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                unset: request === null || request === void 0 ? void 0 : request.unset,
                set: request === null || request === void 0 ? void 0 : request.set,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('PATCH', '/api/v2/chat/threads/{message_id}', pathParams, undefined, body);
            (_44 = decoders.UpdateThreadPartialResponse) === null || _44 === void 0 ? void 0 : _44.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unreadCounts = () => __awaiter(this, void 0, void 0, function* () {
            var _45;
            const response = yield this.sendRequest('GET', '/api/v2/chat/unread', undefined, undefined);
            (_45 = decoders.WrappedUnreadCountsResponse) === null || _45 === void 0 ? void 0 : _45.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unreadCountsBatch = (request) => __awaiter(this, void 0, void 0, function* () {
            var _46;
            const body = {
                user_ids: request === null || request === void 0 ? void 0 : request.user_ids,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/unread_batch', undefined, undefined, body);
            (_46 = decoders.UnreadCountsBatchResponse) === null || _46 === void 0 ? void 0 : _46.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.sendUserCustomEvent = (request) => __awaiter(this, void 0, void 0, function* () {
            var _47;
            const pathParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
            };
            const body = {
                event: request === null || request === void 0 ? void 0 : request.event,
            };
            const response = yield this.sendRequest('POST', '/api/v2/chat/users/{user_id}/event', pathParams, undefined, body);
            (_47 = decoders.Response) === null || _47 === void 0 ? void 0 : _47.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
    }
}

class ChannelApi {
    constructor(chatApi, type, id) {
        this.chatApi = chatApi;
        this.type = type;
        this.id = id;
        this.delete = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.deleteChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.updateChannelPartial = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.updateChannelPartial(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.update = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.updateChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.sendEvent = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.sendEvent(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.deleteFile = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.deleteFile(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.uploadFile = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.uploadFile(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.hide = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.hideChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.deleteImage = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.deleteImage(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.uploadImage = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.uploadImage(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.updateMemberPartial = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.updateMemberPartial(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.sendMessage = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.sendMessage(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.getManyMessages = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.getManyMessages(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.getOrCreate = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.getOrCreateChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.markRead = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.markRead(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.show = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.showChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.truncate = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.truncateChannel(Object.assign({ id: this.id, type: this.type }, request));
        };
        this.markUnread = (request) => {
            if (!this.id) {
                throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);
            }
            return this.chatApi.markUnread(Object.assign({ id: this.id, type: this.type }, request));
        };
    }
}

class StreamChannel extends ChannelApi {
    constructor() {
        super(...arguments);
        this.getOrCreate = (channel_get_or_create_request) => {
            if (!this.id) {
                return this.chatApi
                    .getOrCreateDistinctChannel(Object.assign({ type: this.type }, channel_get_or_create_request))
                    .then((response) => {
                    var _a;
                    this.id = (_a = response.channel) === null || _a === void 0 ? void 0 : _a.id;
                    return response;
                });
            }
            else {
                return this.chatApi.getOrCreateChannel(Object.assign({ id: this.id, type: this.type }, channel_get_or_create_request));
            }
        };
    }
    get cid() {
        return `${this.type}:${this.id}`;
    }
    queryMembers(request) {
        var _a;
        return this.chatApi.queryMembers({
            payload: Object.assign({ id: this.id, type: this.type }, ((_a = request === null || request === void 0 ? void 0 : request.payload) !== null && _a !== void 0 ? _a : { filter_conditions: {} })),
        });
    }
}

class StreamChatClient extends ChatApi {
    constructor() {
        super(...arguments);
        this.channel = (type, id) => {
            return new StreamChannel(this, type, id);
        };
    }
}

class ModerationApi extends BaseApi {
    constructor() {
        super(...arguments);
        this.ban = (request) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const body = {
                target_user_id: request === null || request === void 0 ? void 0 : request.target_user_id,
                banned_by_id: request === null || request === void 0 ? void 0 : request.banned_by_id,
                channel_cid: request === null || request === void 0 ? void 0 : request.channel_cid,
                ip_ban: request === null || request === void 0 ? void 0 : request.ip_ban,
                reason: request === null || request === void 0 ? void 0 : request.reason,
                shadow: request === null || request === void 0 ? void 0 : request.shadow,
                timeout: request === null || request === void 0 ? void 0 : request.timeout,
                banned_by: request === null || request === void 0 ? void 0 : request.banned_by,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/ban', undefined, undefined, body);
            (_a = decoders.BanResponse) === null || _a === void 0 ? void 0 : _a.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.check = (request) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            const body = {
                config_key: request === null || request === void 0 ? void 0 : request.config_key,
                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,
                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,
                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,
                options: request === null || request === void 0 ? void 0 : request.options,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/check', undefined, undefined, body);
            (_b = decoders.CheckResponse) === null || _b === void 0 ? void 0 : _b.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.upsertConfig = (request) => __awaiter(this, void 0, void 0, function* () {
            var _c;
            const body = {
                key: request === null || request === void 0 ? void 0 : request.key,
                async: request === null || request === void 0 ? void 0 : request.async,
                automod_platform_circumvention_config: request === null || request === void 0 ? void 0 : request.automod_platform_circumvention_config,
                automod_semantic_filters_config: request === null || request === void 0 ? void 0 : request.automod_semantic_filters_config,
                automod_toxicity_config: request === null || request === void 0 ? void 0 : request.automod_toxicity_config,
                aws_rek_og_nition_config: request === null || request === void 0 ? void 0 : request.aws_rek_og_nition_config,
                block_list_config: request === null || request === void 0 ? void 0 : request.block_list_config,
                bodyguard_config: request === null || request === void 0 ? void 0 : request.bodyguard_config,
                go_og_le_vision_config: request === null || request === void 0 ? void 0 : request.go_og_le_vision_config,
                velocity_filter_config: request === null || request === void 0 ? void 0 : request.velocity_filter_config,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/config', undefined, undefined, body);
            (_c = decoders.UpsertConfigResponse) === null || _c === void 0 ? void 0 : _c.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getConfig = (request) => __awaiter(this, void 0, void 0, function* () {
            var _d;
            const pathParams = {
                key: request === null || request === void 0 ? void 0 : request.key,
            };
            const response = yield this.sendRequest('GET', '/api/v2/moderation/config/{key}', pathParams, undefined);
            (_d = decoders.GetConfigResponse) === null || _d === void 0 ? void 0 : _d.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.customCheck = (request) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            const body = {
                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,
                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,
                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,
                name: request === null || request === void 0 ? void 0 : request.name,
                reason: request === null || request === void 0 ? void 0 : request.reason,
                recommended_action: request === null || request === void 0 ? void 0 : request.recommended_action,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/custom_check', undefined, undefined, body);
            (_e = decoders.CustomCheckResponse) === null || _e === void 0 ? void 0 : _e.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.v2DeleteTemplate = () => __awaiter(this, void 0, void 0, function* () {
            var _f;
            const response = yield this.sendRequest('DELETE', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);
            (_f = decoders.DeleteModerationTemplateResponse) === null || _f === void 0 ? void 0 : _f.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.v2QueryTemplates = () => __awaiter(this, void 0, void 0, function* () {
            var _g;
            const response = yield this.sendRequest('GET', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);
            (_g = decoders.QueryFeedModerationTemplatesResponse) === null || _g === void 0 ? void 0 : _g.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.v2UpsertTemplate = (request) => __awaiter(this, void 0, void 0, function* () {
            var _h;
            const body = {
                name: request === null || request === void 0 ? void 0 : request.name,
                config: request === null || request === void 0 ? void 0 : request.config,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/feeds_moderation_template', undefined, undefined, body);
            (_h = decoders.UpsertModerationTemplateResponse) === null || _h === void 0 ? void 0 : _h.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.flag = (request) => __awaiter(this, void 0, void 0, function* () {
            var _j;
            const body = {
                entity_id: request === null || request === void 0 ? void 0 : request.entity_id,
                entity_type: request === null || request === void 0 ? void 0 : request.entity_type,
                reason: request === null || request === void 0 ? void 0 : request.reason,
                entity_creator_id: request === null || request === void 0 ? void 0 : request.entity_creator_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                moderation_payload: request === null || request === void 0 ? void 0 : request.moderation_payload,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/flag', undefined, undefined, body);
            (_j = decoders.FlagResponse) === null || _j === void 0 ? void 0 : _j.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryModerationLogs = (request) => __awaiter(this, void 0, void 0, function* () {
            var _k;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/logs', undefined, undefined, body);
            (_k = decoders.QueryModerationLogsResponse) === null || _k === void 0 ? void 0 : _k.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getModeratorStats = () => __awaiter(this, void 0, void 0, function* () {
            var _l;
            const response = yield this.sendRequest('GET', '/api/v2/moderation/moderator_stats', undefined, undefined);
            (_l = decoders.ModeratorStatsResponse) === null || _l === void 0 ? void 0 : _l.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.mute = (request) => __awaiter(this, void 0, void 0, function* () {
            var _m;
            const body = {
                target_ids: request === null || request === void 0 ? void 0 : request.target_ids,
                timeout: request === null || request === void 0 ? void 0 : request.timeout,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/mute', undefined, undefined, body);
            (_m = decoders.MuteResponse) === null || _m === void 0 ? void 0 : _m.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getQueueStats = () => __awaiter(this, void 0, void 0, function* () {
            var _o;
            const response = yield this.sendRequest('GET', '/api/v2/moderation/queue_stats', undefined, undefined);
            (_o = decoders.QueueStatsResponse) === null || _o === void 0 ? void 0 : _o.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryReviewQueue = (request) => __awaiter(this, void 0, void 0, function* () {
            var _p;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                lock_moderator_duration: request === null || request === void 0 ? void 0 : request.lock_moderator_duration,
                lock_moderator_id: request === null || request === void 0 ? void 0 : request.lock_moderator_id,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                stats_only: request === null || request === void 0 ? void 0 : request.stats_only,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/review_queue', undefined, undefined, body);
            (_p = decoders.QueryReviewQueueResponse) === null || _p === void 0 ? void 0 : _p.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getReviewQueueItem = (request) => __awaiter(this, void 0, void 0, function* () {
            var _q;
            const pathParams = {
                id: request === null || request === void 0 ? void 0 : request.id,
            };
            const response = yield this.sendRequest('GET', '/api/v2/moderation/review_queue/{id}', pathParams, undefined);
            (_q = decoders.GetReviewQueueItemResponse) === null || _q === void 0 ? void 0 : _q.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.submitAction = (request) => __awaiter(this, void 0, void 0, function* () {
            var _r;
            const body = {
                action_type: request === null || request === void 0 ? void 0 : request.action_type,
                item_id: request === null || request === void 0 ? void 0 : request.item_id,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                ban: request === null || request === void 0 ? void 0 : request.ban,
                custom: request === null || request === void 0 ? void 0 : request.custom,
                delete_activity: request === null || request === void 0 ? void 0 : request.delete_activity,
                delete_message: request === null || request === void 0 ? void 0 : request.delete_message,
                delete_reaction: request === null || request === void 0 ? void 0 : request.delete_reaction,
                delete_user: request === null || request === void 0 ? void 0 : request.delete_user,
                unban: request === null || request === void 0 ? void 0 : request.unban,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/submit_action', undefined, undefined, body);
            (_r = decoders.SubmitActionResponse) === null || _r === void 0 ? void 0 : _r.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unban = (request) => __awaiter(this, void 0, void 0, function* () {
            var _s;
            const queryParams = {
                target_user_id: request === null || request === void 0 ? void 0 : request.target_user_id,
                channel_cid: request === null || request === void 0 ? void 0 : request.channel_cid,
                created_by: request === null || request === void 0 ? void 0 : request.created_by,
            };
            const body = {
                unbanned_by_id: request === null || request === void 0 ? void 0 : request.unbanned_by_id,
                unbanned_by: request === null || request === void 0 ? void 0 : request.unbanned_by,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/unban', undefined, queryParams, body);
            (_s = decoders.UnbanResponse) === null || _s === void 0 ? void 0 : _s.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.unmute = (request) => __awaiter(this, void 0, void 0, function* () {
            var _t;
            const body = {
                target_ids: request === null || request === void 0 ? void 0 : request.target_ids,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/unmute', undefined, undefined, body);
            (_t = decoders.UnmuteResponse) === null || _t === void 0 ? void 0 : _t.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.queryUsageStats = (request) => __awaiter(this, void 0, void 0, function* () {
            var _u;
            const body = {
                limit: request === null || request === void 0 ? void 0 : request.limit,
                next: request === null || request === void 0 ? void 0 : request.next,
                prev: request === null || request === void 0 ? void 0 : request.prev,
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                sort: request === null || request === void 0 ? void 0 : request.sort,
                filter: request === null || request === void 0 ? void 0 : request.filter,
                user: request === null || request === void 0 ? void 0 : request.user,
            };
            const response = yield this.sendRequest('POST', '/api/v2/moderation/usage_stats', undefined, undefined, body);
            (_u = decoders.QueryUsageStatsResponse) === null || _u === void 0 ? void 0 : _u.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
        this.getUserReport = (request) => __awaiter(this, void 0, void 0, function* () {
            var _v;
            const queryParams = {
                user_id: request === null || request === void 0 ? void 0 : request.user_id,
                create_user_if_not_exists: request === null || request === void 0 ? void 0 : request.create_user_if_not_exists,
                include_user_mutes: request === null || request === void 0 ? void 0 : request.include_user_mutes,
                include_user_blocks: request === null || request === void 0 ? void 0 : request.include_user_blocks,
            };
            const response = yield this.sendRequest('GET', '/api/v2/moderation/user_report', undefined, queryParams);
            (_v = decoders.GetUserModerationReportResponse) === null || _v === void 0 ? void 0 : _v.call(decoders, response.body);
            return Object.assign(Object.assign({}, response.body), { metadata: response.metadata });
        });
    }
}

class StreamModerationClient extends ModerationApi {
}

class StreamClient extends CommonApi {
    /**
     *
     * @param apiKey
     * @param secret
     * @param config config object
     */
    constructor(apiKey, secret, config) {
        var _a, _b, _c;
        const token = JWTServerToken(secret);
        const timeout = (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : StreamClient.DEFAULT_TIMEOUT;
        const chatBaseUrl = (_b = config === null || config === void 0 ? void 0 : config.basePath) !== null && _b !== void 0 ? _b : 'https://chat.stream-io-api.com';
        const videoBaseUrl = (_c = config === null || config === void 0 ? void 0 : config.basePath) !== null && _c !== void 0 ? _c : 'https://video.stream-io-api.com';
        super({ apiKey, token, timeout, baseUrl: chatBaseUrl });
        this.apiKey = apiKey;
        this.secret = secret;
        this.config = config;
        this.options = {};
        this.upsertUsers = (users) => {
            const payload = {};
            users.forEach((u) => {
                payload[u.id] = u;
            });
            return this.updateUsers({ users: payload });
        };
        this.queryBannedUsers = (request) => {
            return this.chat.queryBannedUsers(request);
        };
        /**
         *
         * @param payload
         * - user_id - the id of the user the token is for
         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided
         * - exp - when the token expires, unix timestamp in seconds
         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now
         */
        this.generateUserToken = (payload) => {
            var _a, _b, _c;
            const defaultIat = Math.floor((Date.now() - 1000) / 1000);
            payload.iat = (_a = payload.iat) !== null && _a !== void 0 ? _a : defaultIat;
            const validityInSeconds = (_b = payload.validity_in_seconds) !== null && _b !== void 0 ? _b : 60 * 60;
            payload.exp = (_c = payload.exp) !== null && _c !== void 0 ? _c : payload.iat + validityInSeconds;
            return JWTUserToken(this.secret, payload);
        };
        /**
         *
         * @param payload
         * - user_id - the id of the user the token is for
         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided
         * - exp - when the token expires, unix timestamp in seconds
         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now
         */
        this.generateCallToken = (payload) => {
            return this.generateUserToken(payload);
        };
        /**
         *
         * @param userID
         * @param exp
         * @param iat deprecated, the default date will be set internally
         * @returns
         *
         * @deprecated use generateUserToken instead
         */
        this.createToken = (userID, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {
            const payload = {
                user_id: userID,
                exp,
                iat,
            };
            return JWTUserToken(this.secret, payload);
        };
        /**
         *
         * @param userID
         * @param call_cids
         * @param exp
         * @param iat this is deprecated, the current date will be set internally
         * @returns
         *
         * @deprecated use generateCallToken instead
         */
        this.createCallToken = (userIdOrObject, call_cids, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {
            const payload = {
                exp,
                iat,
                call_cids,
                user_id: typeof userIdOrObject === 'string'
                    ? userIdOrObject
                    : userIdOrObject.user_id,
            };
            if (typeof userIdOrObject === 'object' && userIdOrObject.role) {
                payload.role = userIdOrObject.role;
            }
            return JWTUserToken(this.secret, payload);
        };
        this.verifyWebhook = (requestBody, xSignature) => {
            const key = Buffer.from(this.secret, 'utf8');
            const hash = crypto
                .createHmac('sha256', key)
                .update(requestBody)
                .digest('hex');
            try {
                return crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(xSignature));
            }
            catch (err) {
                return false;
            }
        };
        this.video = new StreamVideoClient({
            apiKey,
            token,
            timeout,
            baseUrl: videoBaseUrl,
        });
        this.chat = new StreamChatClient({
            apiKey,
            token,
            timeout,
            baseUrl: chatBaseUrl,
        });
        this.moderation = new StreamModerationClient({
            apiKey,
            token,
            timeout,
            baseUrl: chatBaseUrl,
        });
    }
}
StreamClient.DEFAULT_TIMEOUT = 3000;

export { OwnCapability, StreamCall, StreamChannel, StreamChatClient, StreamClient, StreamVideoClient };
//# sourceMappingURL=index.es.js.map
