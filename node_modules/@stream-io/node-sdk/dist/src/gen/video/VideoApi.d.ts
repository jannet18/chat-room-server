import { BaseApi } from '../../BaseApi';
import { StreamResponse } from '../../types';
import { BlockUserRequest, BlockUserResponse, CollectUserFeedbackRequest, CollectUserFeedbackResponse, CreateCallTypeRequest, CreateCallTypeResponse, DeleteCallRequest, DeleteCallResponse, DeleteRecordingResponse, DeleteTranscriptionResponse, EndCallResponse, GetCallResponse, GetCallStatsResponse, GetCallTypeResponse, GetEdgesResponse, GetOrCreateCallRequest, GetOrCreateCallResponse, GoLiveRequest, GoLiveResponse, ListCallTypeResponse, ListRecordingsResponse, ListTranscriptionsResponse, MuteUsersRequest, MuteUsersResponse, PinRequest, PinResponse, QueryCallMembersRequest, QueryCallMembersResponse, QueryCallStatsRequest, QueryCallStatsResponse, QueryCallsRequest, QueryCallsResponse, Response, SendCallEventRequest, SendCallEventResponse, StartHLSBroadcastingResponse, StartRTMPBroadcastsRequest, StartRTMPBroadcastsResponse, StartRecordingRequest, StartRecordingResponse, StartTranscriptionRequest, StartTranscriptionResponse, StopAllRTMPBroadcastsResponse, StopHLSBroadcastingResponse, StopLiveResponse, StopRTMPBroadcastsRequest, StopRTMPBroadcastsResponse, StopRecordingResponse, StopTranscriptionResponse, UnblockUserRequest, UnblockUserResponse, UnpinRequest, UnpinResponse, UpdateCallMembersRequest, UpdateCallMembersResponse, UpdateCallRequest, UpdateCallResponse, UpdateCallTypeRequest, UpdateCallTypeResponse, UpdateUserPermissionsRequest, UpdateUserPermissionsResponse } from '../models';
export declare class VideoApi extends BaseApi {
    queryCallMembers: (request: QueryCallMembersRequest) => Promise<StreamResponse<QueryCallMembersResponse>>;
    queryCallStats: (request?: QueryCallStatsRequest) => Promise<StreamResponse<QueryCallStatsResponse>>;
    getCall: (request: {
        type: string;
        id: string;
        members_limit?: number;
        ring?: boolean;
        notify?: boolean;
        video?: boolean;
    }) => Promise<StreamResponse<GetCallResponse>>;
    updateCall: (request: UpdateCallRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UpdateCallResponse>>;
    getOrCreateCall: (request: GetOrCreateCallRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<GetOrCreateCallResponse>>;
    blockUser: (request: BlockUserRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<BlockUserResponse>>;
    deleteCall: (request: DeleteCallRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<DeleteCallResponse>>;
    sendCallEvent: (request: SendCallEventRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<SendCallEventResponse>>;
    collectUserFeedback: (request: CollectUserFeedbackRequest & {
        type: string;
        id: string;
        session: string;
    }) => Promise<StreamResponse<CollectUserFeedbackResponse>>;
    goLive: (request: GoLiveRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<GoLiveResponse>>;
    endCall: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<EndCallResponse>>;
    updateCallMembers: (request: UpdateCallMembersRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UpdateCallMembersResponse>>;
    muteUsers: (request: MuteUsersRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<MuteUsersResponse>>;
    videoPin: (request: PinRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<PinResponse>>;
    listRecordings: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<ListRecordingsResponse>>;
    startRTMPBroadcasts: (request: StartRTMPBroadcastsRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StartRTMPBroadcastsResponse>>;
    stopAllRTMPBroadcasts: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StopAllRTMPBroadcastsResponse>>;
    stopRTMPBroadcast: (request: StopRTMPBroadcastsRequest & {
        type: string;
        id: string;
        name: string;
    }) => Promise<StreamResponse<StopRTMPBroadcastsResponse>>;
    startHLSBroadcasting: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StartHLSBroadcastingResponse>>;
    startRecording: (request: StartRecordingRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StartRecordingResponse>>;
    startTranscription: (request: StartTranscriptionRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StartTranscriptionResponse>>;
    getCallStats: (request: {
        type: string;
        id: string;
        session: string;
    }) => Promise<StreamResponse<GetCallStatsResponse>>;
    stopHLSBroadcasting: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StopHLSBroadcastingResponse>>;
    stopLive: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StopLiveResponse>>;
    stopRecording: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StopRecordingResponse>>;
    stopTranscription: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<StopTranscriptionResponse>>;
    listTranscriptions: (request: {
        type: string;
        id: string;
    }) => Promise<StreamResponse<ListTranscriptionsResponse>>;
    unblockUser: (request: UnblockUserRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UnblockUserResponse>>;
    videoUnpin: (request: UnpinRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UnpinResponse>>;
    updateUserPermissions: (request: UpdateUserPermissionsRequest & {
        type: string;
        id: string;
    }) => Promise<StreamResponse<UpdateUserPermissionsResponse>>;
    deleteRecording: (request: {
        type: string;
        id: string;
        session: string;
        filename: string;
    }) => Promise<StreamResponse<DeleteRecordingResponse>>;
    deleteTranscription: (request: {
        type: string;
        id: string;
        session: string;
        filename: string;
    }) => Promise<StreamResponse<DeleteTranscriptionResponse>>;
    queryCalls: (request?: QueryCallsRequest) => Promise<StreamResponse<QueryCallsResponse>>;
    listCallTypes: () => Promise<StreamResponse<ListCallTypeResponse>>;
    createCallType: (request: CreateCallTypeRequest) => Promise<StreamResponse<CreateCallTypeResponse>>;
    deleteCallType: (request: {
        name: string;
    }) => Promise<StreamResponse<Response>>;
    getCallType: (request: {
        name: string;
    }) => Promise<StreamResponse<GetCallTypeResponse>>;
    updateCallType: (request: UpdateCallTypeRequest & {
        name: string;
    }) => Promise<StreamResponse<UpdateCallTypeResponse>>;
    getEdges: () => Promise<StreamResponse<GetEdgesResponse>>;
}
